
day07 Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  0800138c  0800138c  0000238c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001520  08001520  00003050  2**0
                  CONTENTS
  4 .ARM          00000008  08001520  08001520  00002520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001528  08001528  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001528  08001528  00002528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800152c  0800152c  0000252c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001530  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003050  2**0
                  CONTENTS
 10 .bss          00000168  20000050  20000050  00003050  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b8  200001b8  00003050  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 13 .debug_info   000019a2  00000000  00000000  0000307a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000755  00000000  00000000  00004a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000158  00000000  00000000  00005178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000e4  00000000  00000000  000052d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001866b  00000000  00000000  000053b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001e9a  00000000  00000000  0001da1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c405  00000000  00000000  0001f8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000abcbe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a44  00000000  00000000  000abd04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000ac748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005a  00000000  00000000  000ac767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000050 	.word	0x20000050
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001374 	.word	0x08001374

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000054 	.word	0x20000054
 80001cc:	08001374 	.word	0x08001374

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LedInit>:
 */

#include "led.h"
#include "stm32f4xx.h"

void LedInit(uint32_t pin) {
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 8000288:	4b28      	ldr	r3, [pc, #160]	@ (800032c <LedInit+0xac>)
 800028a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800028c:	4a27      	ldr	r2, [pc, #156]	@ (800032c <LedInit+0xac>)
 800028e:	f043 0308 	orr.w	r3, r3, #8
 8000292:	6313      	str	r3, [r2, #48]	@ 0x30

	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 8000294:	4b26      	ldr	r3, [pc, #152]	@ (8000330 <LedInit+0xb0>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	0052      	lsls	r2, r2, #1
 800029c:	3201      	adds	r2, #1
 800029e:	2101      	movs	r1, #1
 80002a0:	fa01 f202 	lsl.w	r2, r1, r2
 80002a4:	43d2      	mvns	r2, r2
 80002a6:	4611      	mov	r1, r2
 80002a8:	4a21      	ldr	r2, [pc, #132]	@ (8000330 <LedInit+0xb0>)
 80002aa:	400b      	ands	r3, r1
 80002ac:	6013      	str	r3, [r2, #0]
	LED_GPIO->MODER |= BV(pin * 2);
 80002ae:	4b20      	ldr	r3, [pc, #128]	@ (8000330 <LedInit+0xb0>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	0052      	lsls	r2, r2, #1
 80002b6:	2101      	movs	r1, #1
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	4611      	mov	r1, r2
 80002be:	4a1c      	ldr	r2, [pc, #112]	@ (8000330 <LedInit+0xb0>)
 80002c0:	430b      	orrs	r3, r1
 80002c2:	6013      	str	r3, [r2, #0]

	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80002c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000330 <LedInit+0xb0>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	0052      	lsls	r2, r2, #1
 80002cc:	3201      	adds	r2, #1
 80002ce:	2101      	movs	r1, #1
 80002d0:	4091      	lsls	r1, r2
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	0052      	lsls	r2, r2, #1
 80002d6:	2001      	movs	r0, #1
 80002d8:	fa00 f202 	lsl.w	r2, r0, r2
 80002dc:	430a      	orrs	r2, r1
 80002de:	43d2      	mvns	r2, r2
 80002e0:	4611      	mov	r1, r2
 80002e2:	4a13      	ldr	r2, [pc, #76]	@ (8000330 <LedInit+0xb0>)
 80002e4:	400b      	ands	r3, r1
 80002e6:	6093      	str	r3, [r2, #8]

	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80002e8:	4b11      	ldr	r3, [pc, #68]	@ (8000330 <LedInit+0xb0>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	0052      	lsls	r2, r2, #1
 80002f0:	3201      	adds	r2, #1
 80002f2:	2101      	movs	r1, #1
 80002f4:	4091      	lsls	r1, r2
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	0052      	lsls	r2, r2, #1
 80002fa:	2001      	movs	r0, #1
 80002fc:	fa00 f202 	lsl.w	r2, r0, r2
 8000300:	430a      	orrs	r2, r1
 8000302:	43d2      	mvns	r2, r2
 8000304:	4611      	mov	r1, r2
 8000306:	4a0a      	ldr	r2, [pc, #40]	@ (8000330 <LedInit+0xb0>)
 8000308:	400b      	ands	r3, r1
 800030a:	60d3      	str	r3, [r2, #12]

	LED_GPIO->OTYPER &= ~BV(pin);
 800030c:	4b08      	ldr	r3, [pc, #32]	@ (8000330 <LedInit+0xb0>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	2101      	movs	r1, #1
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	fa01 f202 	lsl.w	r2, r1, r2
 8000318:	43d2      	mvns	r2, r2
 800031a:	4611      	mov	r1, r2
 800031c:	4a04      	ldr	r2, [pc, #16]	@ (8000330 <LedInit+0xb0>)
 800031e:	400b      	ands	r3, r1
 8000320:	6053      	str	r3, [r2, #4]
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	40023800 	.word	0x40023800
 8000330:	40020c00 	.word	0x40020c00

08000334 <LedOn>:

void LedOn(uint32_t pin) {
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]

	//LED_GPIO->ODR |= BV(pin);
	BB_ALS(&LED_GPIO-> ODR ,pin)=1;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	009a      	lsls	r2, r3, #2
 8000340:	4b04      	ldr	r3, [pc, #16]	@ (8000354 <LedOn+0x20>)
 8000342:	4413      	add	r3, r2
 8000344:	461a      	mov	r2, r3
 8000346:	2301      	movs	r3, #1
 8000348:	6013      	str	r3, [r2, #0]
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	42418280 	.word	0x42418280

08000358 <LedOff>:

void LedOff(uint32_t pin) {
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]

	//LED_GPIO->ODR &= ~BV(pin);
	BB_ALS(&LED_GPIO-> ODR ,pin)=0;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	009a      	lsls	r2, r3, #2
 8000364:	4b04      	ldr	r3, [pc, #16]	@ (8000378 <LedOff+0x20>)
 8000366:	4413      	add	r3, r2
 8000368:	461a      	mov	r2, r3
 800036a:	2300      	movs	r3, #0
 800036c:	6013      	str	r3, [r2, #0]
}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr
 8000378:	42418280 	.word	0x42418280

0800037c <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)

#endif

int main(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b08a      	sub	sp, #40	@ 0x28
 8000380:	af00      	add	r7, sp, #0
	SystemInit();
 8000382:	f000 f89d 	bl	80004c0 <SystemInit>
	UartInit(BAUD_9600);
 8000386:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 800038a:	f000 f8cf 	bl	800052c <UartInit>
	UartPuts("Enter string ...\r\n");
 800038e:	4824      	ldr	r0, [pc, #144]	@ (8000420 <main+0xa4>)
 8000390:	f000 f966 	bl	8000660 <UartPuts>

	LedInit(LED_RED);
 8000394:	200e      	movs	r0, #14
 8000396:	f7ff ff73 	bl	8000280 <LedInit>
	LedInit(LED_BLUE);
 800039a:	200f      	movs	r0, #15
 800039c:	f7ff ff70 	bl	8000280 <LedInit>
    char str[32];
	int choice;

	do
	{
		UartPuts("1 \n red led on \r");
 80003a0:	4820      	ldr	r0, [pc, #128]	@ (8000424 <main+0xa8>)
 80003a2:	f000 f95d 	bl	8000660 <UartPuts>
		UartPuts("2\n red led off \r");
 80003a6:	4820      	ldr	r0, [pc, #128]	@ (8000428 <main+0xac>)
 80003a8:	f000 f95a 	bl	8000660 <UartPuts>
		UartPuts("3\n blue led on \r");
 80003ac:	481f      	ldr	r0, [pc, #124]	@ (800042c <main+0xb0>)
 80003ae:	f000 f957 	bl	8000660 <UartPuts>
		UartPuts("4\n blue led off \r");
 80003b2:	481f      	ldr	r0, [pc, #124]	@ (8000430 <main+0xb4>)
 80003b4:	f000 f954 	bl	8000660 <UartPuts>




		UartGets(str);
 80003b8:	f107 0308 	add.w	r3, r7, #8
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 f96b 	bl	8000698 <UartGets>

		sscanf(str,"%d", &choice);
 80003c2:	1d3a      	adds	r2, r7, #4
 80003c4:	f107 0308 	add.w	r3, r7, #8
 80003c8:	491a      	ldr	r1, [pc, #104]	@ (8000434 <main+0xb8>)
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 f9b4 	bl	8000738 <siscanf>

		switch(choice)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	3b01      	subs	r3, #1
 80003d4:	2b03      	cmp	r3, #3
 80003d6:	d81b      	bhi.n	8000410 <main+0x94>
 80003d8:	a201      	add	r2, pc, #4	@ (adr r2, 80003e0 <main+0x64>)
 80003da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003de:	bf00      	nop
 80003e0:	080003f1 	.word	0x080003f1
 80003e4:	080003f9 	.word	0x080003f9
 80003e8:	08000401 	.word	0x08000401
 80003ec:	08000409 	.word	0x08000409
	     {
	     case 1 :
                 LedOn(LED_RED);
 80003f0:	200e      	movs	r0, #14
 80003f2:	f7ff ff9f 	bl	8000334 <LedOn>
	    	 break;
 80003f6:	e00b      	b.n	8000410 <main+0x94>

	     case 2:

	    	 LedOff(LED_RED);
 80003f8:	200e      	movs	r0, #14
 80003fa:	f7ff ffad 	bl	8000358 <LedOff>
	    	 break;
 80003fe:	e007      	b.n	8000410 <main+0x94>

	     case 3:
	    	 LedOn(LED_BLUE);
 8000400:	200f      	movs	r0, #15
 8000402:	f7ff ff97 	bl	8000334 <LedOn>
		      break;
 8000406:	e003      	b.n	8000410 <main+0x94>

	     case 4:
	    	 LedOff(LED_BLUE);
 8000408:	200f      	movs	r0, #15
 800040a:	f7ff ffa5 	bl	8000358 <LedOff>
	    	 break;
 800040e:	bf00      	nop
}
	}while(choice!=0);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d1c4      	bne.n	80003a0 <main+0x24>

return 0;
 8000416:	2300      	movs	r3, #0

	}
 8000418:	4618      	mov	r0, r3
 800041a:	3728      	adds	r7, #40	@ 0x28
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	0800138c 	.word	0x0800138c
 8000424:	080013a0 	.word	0x080013a0
 8000428:	080013b4 	.word	0x080013b4
 800042c:	080013c8 	.word	0x080013c8
 8000430:	080013dc 	.word	0x080013dc
 8000434:	080013f0 	.word	0x080013f0

08000438 <EXTI0_IRQHandler>:


volatile int exti0_flag = 0;


void EXTI0_IRQHandler(void) {
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0

	EXTI->PR |= BV(SWITCH);
 800043c:	4b04      	ldr	r3, [pc, #16]	@ (8000450 <EXTI0_IRQHandler+0x18>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	4a03      	ldr	r2, [pc, #12]	@ (8000450 <EXTI0_IRQHandler+0x18>)
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	6153      	str	r3, [r2, #20]

}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	40013c00 	.word	0x40013c00

08000454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800045c:	4a14      	ldr	r2, [pc, #80]	@ (80004b0 <_sbrk+0x5c>)
 800045e:	4b15      	ldr	r3, [pc, #84]	@ (80004b4 <_sbrk+0x60>)
 8000460:	1ad3      	subs	r3, r2, r3
 8000462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000468:	4b13      	ldr	r3, [pc, #76]	@ (80004b8 <_sbrk+0x64>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d102      	bne.n	8000476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000470:	4b11      	ldr	r3, [pc, #68]	@ (80004b8 <_sbrk+0x64>)
 8000472:	4a12      	ldr	r2, [pc, #72]	@ (80004bc <_sbrk+0x68>)
 8000474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000476:	4b10      	ldr	r3, [pc, #64]	@ (80004b8 <_sbrk+0x64>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4413      	add	r3, r2
 800047e:	693a      	ldr	r2, [r7, #16]
 8000480:	429a      	cmp	r2, r3
 8000482:	d207      	bcs.n	8000494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000484:	f000 f984 	bl	8000790 <__errno>
 8000488:	4603      	mov	r3, r0
 800048a:	220c      	movs	r2, #12
 800048c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800048e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000492:	e009      	b.n	80004a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000494:	4b08      	ldr	r3, [pc, #32]	@ (80004b8 <_sbrk+0x64>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800049a:	4b07      	ldr	r3, [pc, #28]	@ (80004b8 <_sbrk+0x64>)
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4413      	add	r3, r2
 80004a2:	4a05      	ldr	r2, [pc, #20]	@ (80004b8 <_sbrk+0x64>)
 80004a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004a6:	68fb      	ldr	r3, [r7, #12]
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3718      	adds	r7, #24
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20020000 	.word	0x20020000
 80004b4:	00000400 	.word	0x00000400
 80004b8:	2000006c 	.word	0x2000006c
 80004bc:	200001b8 	.word	0x200001b8

080004c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  DWT_Init();
 80004c4:	f000 f802 	bl	80004cc <DWT_Init>
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}

080004cc <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80004d0:	4b14      	ldr	r3, [pc, #80]	@ (8000524 <DWT_Init+0x58>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	4a13      	ldr	r2, [pc, #76]	@ (8000524 <DWT_Init+0x58>)
 80004d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80004da:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80004dc:	4b11      	ldr	r3, [pc, #68]	@ (8000524 <DWT_Init+0x58>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	4a10      	ldr	r2, [pc, #64]	@ (8000524 <DWT_Init+0x58>)
 80004e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004e6:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000528 <DWT_Init+0x5c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000528 <DWT_Init+0x5c>)
 80004ee:	f023 0301 	bic.w	r3, r3, #1
 80004f2:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000528 <DWT_Init+0x5c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000528 <DWT_Init+0x5c>)
 80004fa:	f043 0301 	orr.w	r3, r3, #1
 80004fe:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000500:	4b09      	ldr	r3, [pc, #36]	@ (8000528 <DWT_Init+0x5c>)
 8000502:	2200      	movs	r2, #0
 8000504:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000506:	bf00      	nop
    __ASM volatile ("NOP");
 8000508:	bf00      	nop
    __ASM volatile ("NOP");
 800050a:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 800050c:	4b06      	ldr	r3, [pc, #24]	@ (8000528 <DWT_Init+0x5c>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	2b00      	cmp	r3, #0
 8000512:	bf0c      	ite	eq
 8000514:	2301      	moveq	r3, #1
 8000516:	2300      	movne	r3, #0
 8000518:	b2db      	uxtb	r3, r3
}
 800051a:	4618      	mov	r0, r3
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	e000edf0 	.word	0xe000edf0
 8000528:	e0001000 	.word	0xe0001000

0800052c <UartInit>:

#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud) {
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]

	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 8000534:	4b31      	ldr	r3, [pc, #196]	@ (80005fc <UartInit+0xd0>)
 8000536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000538:	4a30      	ldr	r2, [pc, #192]	@ (80005fc <UartInit+0xd0>)
 800053a:	f043 0301 	orr.w	r3, r3, #1
 800053e:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 8000540:	4b2f      	ldr	r3, [pc, #188]	@ (8000600 <UartInit+0xd4>)
 8000542:	6a1b      	ldr	r3, [r3, #32]
 8000544:	4a2e      	ldr	r2, [pc, #184]	@ (8000600 <UartInit+0xd4>)
 8000546:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800054a:	6213      	str	r3, [r2, #32]

	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 800054c:	4b2c      	ldr	r3, [pc, #176]	@ (8000600 <UartInit+0xd4>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a2b      	ldr	r2, [pc, #172]	@ (8000600 <UartInit+0xd4>)
 8000552:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000556:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 8000558:	4b29      	ldr	r3, [pc, #164]	@ (8000600 <UartInit+0xd4>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a28      	ldr	r2, [pc, #160]	@ (8000600 <UartInit+0xd4>)
 800055e:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8000562:	6013      	str	r3, [r2, #0]

	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000564:	4b26      	ldr	r3, [pc, #152]	@ (8000600 <UartInit+0xd4>)
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	4a25      	ldr	r2, [pc, #148]	@ (8000600 <UartInit+0xd4>)
 800056a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800056e:	6093      	str	r3, [r2, #8]

	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000570:	4b23      	ldr	r3, [pc, #140]	@ (8000600 <UartInit+0xd4>)
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	4a22      	ldr	r2, [pc, #136]	@ (8000600 <UartInit+0xd4>)
 8000576:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800057a:	60d3      	str	r3, [r2, #12]

	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 800057c:	4b20      	ldr	r3, [pc, #128]	@ (8000600 <UartInit+0xd4>)
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	4a1f      	ldr	r2, [pc, #124]	@ (8000600 <UartInit+0xd4>)
 8000582:	f023 030c 	bic.w	r3, r3, #12
 8000586:	6053      	str	r3, [r2, #4]

	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 8000588:	4b1c      	ldr	r3, [pc, #112]	@ (80005fc <UartInit+0xd0>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	4a1b      	ldr	r2, [pc, #108]	@ (80005fc <UartInit+0xd0>)
 800058e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000592:	6413      	str	r3, [r2, #64]	@ 0x40

	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 8000594:	4b1b      	ldr	r3, [pc, #108]	@ (8000604 <UartInit+0xd8>)
 8000596:	220c      	movs	r2, #12
 8000598:	60da      	str	r2, [r3, #12]

	USART2->CR2 = 0x00000000;
 800059a:	4b1a      	ldr	r3, [pc, #104]	@ (8000604 <UartInit+0xd8>)
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]

	USART2->CR3 = 0x00000000;
 80005a0:	4b18      	ldr	r3, [pc, #96]	@ (8000604 <UartInit+0xd8>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	615a      	str	r2, [r3, #20]

		switch(baud) {
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80005ac:	d016      	beq.n	80005dc <UartInit+0xb0>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80005b4:	d816      	bhi.n	80005e4 <UartInit+0xb8>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 80005bc:	d004      	beq.n	80005c8 <UartInit+0x9c>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 80005c4:	d005      	beq.n	80005d2 <UartInit+0xa6>
 80005c6:	e00d      	b.n	80005e4 <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 80005c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <UartInit+0xd8>)
 80005ca:	f240 6283 	movw	r2, #1667	@ 0x683
 80005ce:	609a      	str	r2, [r3, #8]
			break;
 80005d0:	e008      	b.n	80005e4 <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 80005d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <UartInit+0xd8>)
 80005d4:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80005d8:	609a      	str	r2, [r3, #8]
			break;
 80005da:	e003      	b.n	80005e4 <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 80005dc:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <UartInit+0xd8>)
 80005de:	228b      	movs	r2, #139	@ 0x8b
 80005e0:	609a      	str	r2, [r3, #8]
			break;
 80005e2:	bf00      	nop
	}

	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 80005e4:	4b07      	ldr	r3, [pc, #28]	@ (8000604 <UartInit+0xd8>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	4a06      	ldr	r2, [pc, #24]	@ (8000604 <UartInit+0xd8>)
 80005ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005ee:	60d3      	str	r3, [r2, #12]
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40020000 	.word	0x40020000
 8000604:	40004400 	.word	0x40004400

08000608 <UartPutch>:

void UartPutch(uint8_t ch) {
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]

	while((USART2->SR & BV(USART_SR_TXE_Pos)) == 0)
 8000612:	bf00      	nop
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <UartPutch+0x28>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800061c:	2b00      	cmp	r3, #0
 800061e:	d0f9      	beq.n	8000614 <UartPutch+0xc>
		;

	USART2->DR = ch;
 8000620:	4a03      	ldr	r2, [pc, #12]	@ (8000630 <UartPutch+0x28>)
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	6053      	str	r3, [r2, #4]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	40004400 	.word	0x40004400

08000634 <UartGetch>:

uint8_t UartGetch(void) {
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0

	while((USART2->SR & BV(USART_SR_RXNE_Pos)) == 0)
 800063a:	bf00      	nop
 800063c:	4b07      	ldr	r3, [pc, #28]	@ (800065c <UartGetch+0x28>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f003 0320 	and.w	r3, r3, #32
 8000644:	2b00      	cmp	r3, #0
 8000646:	d0f9      	beq.n	800063c <UartGetch+0x8>
		;

	char ch = USART2->DR;
 8000648:	4b04      	ldr	r3, [pc, #16]	@ (800065c <UartGetch+0x28>)
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	71fb      	strb	r3, [r7, #7]
	return ch;
 800064e:	79fb      	ldrb	r3, [r7, #7]
}
 8000650:	4618      	mov	r0, r3
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40004400 	.word	0x40004400

08000660 <UartPuts>:

void UartPuts(char str[]) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; str[i]!='\0'; i++)
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	e009      	b.n	8000682 <UartPuts+0x22>
		UartPutch(str[i]);
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	4413      	add	r3, r2
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ffc6 	bl	8000608 <UartPutch>
	for(i=0; str[i]!='\0'; i++)
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3301      	adds	r3, #1
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	4413      	add	r3, r2
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1ef      	bne.n	800066e <UartPuts+0xe>
}
 800068e:	bf00      	nop
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <UartGets>:

void UartGets(char str[]) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	int i=0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
	char ch;
	do {
		ch = UartGetch();
 80006a4:	f7ff ffc6 	bl	8000634 <UartGetch>
 80006a8:	4603      	mov	r3, r0
 80006aa:	72fb      	strb	r3, [r7, #11]
		str[i] = ch;
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	7afa      	ldrb	r2, [r7, #11]
 80006b4:	701a      	strb	r2, [r3, #0]
		i++;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
	} while(ch != '\r');
 80006bc:	7afb      	ldrb	r3, [r7, #11]
 80006be:	2b0d      	cmp	r3, #13
 80006c0:	d1f0      	bne.n	80006a4 <UartGets+0xc>
	str[i] = '\n';
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	4413      	add	r3, r2
 80006c8:	220a      	movs	r2, #10
 80006ca:	701a      	strb	r2, [r3, #0]
	i++;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	3301      	adds	r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
	str[i] = '\0';
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	4413      	add	r3, r2
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006e4:	480d      	ldr	r0, [pc, #52]	@ (800071c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006e8:	f7ff feea 	bl	80004c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ec:	480c      	ldr	r0, [pc, #48]	@ (8000720 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ee:	490d      	ldr	r1, [pc, #52]	@ (8000724 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000728 <LoopForever+0xe>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f4:	e002      	b.n	80006fc <LoopCopyDataInit>

080006f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fa:	3304      	adds	r3, #4

080006fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000700:	d3f9      	bcc.n	80006f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000702:	4a0a      	ldr	r2, [pc, #40]	@ (800072c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000704:	4c0a      	ldr	r4, [pc, #40]	@ (8000730 <LoopForever+0x16>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000708:	e001      	b.n	800070e <LoopFillZerobss>

0800070a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800070c:	3204      	adds	r2, #4

0800070e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000710:	d3fb      	bcc.n	800070a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000712:	f000 f843 	bl	800079c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000716:	f7ff fe31 	bl	800037c <main>

0800071a <LoopForever>:

LoopForever:
  b LoopForever
 800071a:	e7fe      	b.n	800071a <LoopForever>
  ldr   r0, =_estack
 800071c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000724:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000728:	08001530 	.word	0x08001530
  ldr r2, =_sbss
 800072c:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000730:	200001b8 	.word	0x200001b8

08000734 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000734:	e7fe      	b.n	8000734 <ADC_IRQHandler>
	...

08000738 <siscanf>:
 8000738:	b40e      	push	{r1, r2, r3}
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	b09c      	sub	sp, #112	@ 0x70
 800073e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8000740:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8000744:	f854 5b04 	ldr.w	r5, [r4], #4
 8000748:	f8ad 2014 	strh.w	r2, [sp, #20]
 800074c:	9002      	str	r0, [sp, #8]
 800074e:	9006      	str	r0, [sp, #24]
 8000750:	f7ff fd3e 	bl	80001d0 <strlen>
 8000754:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <siscanf+0x4c>)
 8000756:	9003      	str	r0, [sp, #12]
 8000758:	9007      	str	r0, [sp, #28]
 800075a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800075c:	480a      	ldr	r0, [pc, #40]	@ (8000788 <siscanf+0x50>)
 800075e:	9401      	str	r4, [sp, #4]
 8000760:	2300      	movs	r3, #0
 8000762:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000764:	9314      	str	r3, [sp, #80]	@ 0x50
 8000766:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800076a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800076e:	462a      	mov	r2, r5
 8000770:	4623      	mov	r3, r4
 8000772:	a902      	add	r1, sp, #8
 8000774:	6800      	ldr	r0, [r0, #0]
 8000776:	f000 f987 	bl	8000a88 <__ssvfiscanf_r>
 800077a:	b01c      	add	sp, #112	@ 0x70
 800077c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000780:	b003      	add	sp, #12
 8000782:	4770      	bx	lr
 8000784:	0800078d 	.word	0x0800078d
 8000788:	20000000 	.word	0x20000000

0800078c <__seofread>:
 800078c:	2000      	movs	r0, #0
 800078e:	4770      	bx	lr

08000790 <__errno>:
 8000790:	4b01      	ldr	r3, [pc, #4]	@ (8000798 <__errno+0x8>)
 8000792:	6818      	ldr	r0, [r3, #0]
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	20000000 	.word	0x20000000

0800079c <__libc_init_array>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	4d0d      	ldr	r5, [pc, #52]	@ (80007d4 <__libc_init_array+0x38>)
 80007a0:	4c0d      	ldr	r4, [pc, #52]	@ (80007d8 <__libc_init_array+0x3c>)
 80007a2:	1b64      	subs	r4, r4, r5
 80007a4:	10a4      	asrs	r4, r4, #2
 80007a6:	2600      	movs	r6, #0
 80007a8:	42a6      	cmp	r6, r4
 80007aa:	d109      	bne.n	80007c0 <__libc_init_array+0x24>
 80007ac:	4d0b      	ldr	r5, [pc, #44]	@ (80007dc <__libc_init_array+0x40>)
 80007ae:	4c0c      	ldr	r4, [pc, #48]	@ (80007e0 <__libc_init_array+0x44>)
 80007b0:	f000 fde0 	bl	8001374 <_init>
 80007b4:	1b64      	subs	r4, r4, r5
 80007b6:	10a4      	asrs	r4, r4, #2
 80007b8:	2600      	movs	r6, #0
 80007ba:	42a6      	cmp	r6, r4
 80007bc:	d105      	bne.n	80007ca <__libc_init_array+0x2e>
 80007be:	bd70      	pop	{r4, r5, r6, pc}
 80007c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80007c4:	4798      	blx	r3
 80007c6:	3601      	adds	r6, #1
 80007c8:	e7ee      	b.n	80007a8 <__libc_init_array+0xc>
 80007ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80007ce:	4798      	blx	r3
 80007d0:	3601      	adds	r6, #1
 80007d2:	e7f2      	b.n	80007ba <__libc_init_array+0x1e>
 80007d4:	08001528 	.word	0x08001528
 80007d8:	08001528 	.word	0x08001528
 80007dc:	08001528 	.word	0x08001528
 80007e0:	0800152c 	.word	0x0800152c

080007e4 <__retarget_lock_acquire_recursive>:
 80007e4:	4770      	bx	lr

080007e6 <__retarget_lock_release_recursive>:
 80007e6:	4770      	bx	lr

080007e8 <_free_r>:
 80007e8:	b538      	push	{r3, r4, r5, lr}
 80007ea:	4605      	mov	r5, r0
 80007ec:	2900      	cmp	r1, #0
 80007ee:	d041      	beq.n	8000874 <_free_r+0x8c>
 80007f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80007f4:	1f0c      	subs	r4, r1, #4
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	bfb8      	it	lt
 80007fa:	18e4      	addlt	r4, r4, r3
 80007fc:	f000 f8e0 	bl	80009c0 <__malloc_lock>
 8000800:	4a1d      	ldr	r2, [pc, #116]	@ (8000878 <_free_r+0x90>)
 8000802:	6813      	ldr	r3, [r2, #0]
 8000804:	b933      	cbnz	r3, 8000814 <_free_r+0x2c>
 8000806:	6063      	str	r3, [r4, #4]
 8000808:	6014      	str	r4, [r2, #0]
 800080a:	4628      	mov	r0, r5
 800080c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000810:	f000 b8dc 	b.w	80009cc <__malloc_unlock>
 8000814:	42a3      	cmp	r3, r4
 8000816:	d908      	bls.n	800082a <_free_r+0x42>
 8000818:	6820      	ldr	r0, [r4, #0]
 800081a:	1821      	adds	r1, r4, r0
 800081c:	428b      	cmp	r3, r1
 800081e:	bf01      	itttt	eq
 8000820:	6819      	ldreq	r1, [r3, #0]
 8000822:	685b      	ldreq	r3, [r3, #4]
 8000824:	1809      	addeq	r1, r1, r0
 8000826:	6021      	streq	r1, [r4, #0]
 8000828:	e7ed      	b.n	8000806 <_free_r+0x1e>
 800082a:	461a      	mov	r2, r3
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	b10b      	cbz	r3, 8000834 <_free_r+0x4c>
 8000830:	42a3      	cmp	r3, r4
 8000832:	d9fa      	bls.n	800082a <_free_r+0x42>
 8000834:	6811      	ldr	r1, [r2, #0]
 8000836:	1850      	adds	r0, r2, r1
 8000838:	42a0      	cmp	r0, r4
 800083a:	d10b      	bne.n	8000854 <_free_r+0x6c>
 800083c:	6820      	ldr	r0, [r4, #0]
 800083e:	4401      	add	r1, r0
 8000840:	1850      	adds	r0, r2, r1
 8000842:	4283      	cmp	r3, r0
 8000844:	6011      	str	r1, [r2, #0]
 8000846:	d1e0      	bne.n	800080a <_free_r+0x22>
 8000848:	6818      	ldr	r0, [r3, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	6053      	str	r3, [r2, #4]
 800084e:	4408      	add	r0, r1
 8000850:	6010      	str	r0, [r2, #0]
 8000852:	e7da      	b.n	800080a <_free_r+0x22>
 8000854:	d902      	bls.n	800085c <_free_r+0x74>
 8000856:	230c      	movs	r3, #12
 8000858:	602b      	str	r3, [r5, #0]
 800085a:	e7d6      	b.n	800080a <_free_r+0x22>
 800085c:	6820      	ldr	r0, [r4, #0]
 800085e:	1821      	adds	r1, r4, r0
 8000860:	428b      	cmp	r3, r1
 8000862:	bf04      	itt	eq
 8000864:	6819      	ldreq	r1, [r3, #0]
 8000866:	685b      	ldreq	r3, [r3, #4]
 8000868:	6063      	str	r3, [r4, #4]
 800086a:	bf04      	itt	eq
 800086c:	1809      	addeq	r1, r1, r0
 800086e:	6021      	streq	r1, [r4, #0]
 8000870:	6054      	str	r4, [r2, #4]
 8000872:	e7ca      	b.n	800080a <_free_r+0x22>
 8000874:	bd38      	pop	{r3, r4, r5, pc}
 8000876:	bf00      	nop
 8000878:	200001b4 	.word	0x200001b4

0800087c <sbrk_aligned>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	4e0f      	ldr	r6, [pc, #60]	@ (80008bc <sbrk_aligned+0x40>)
 8000880:	460c      	mov	r4, r1
 8000882:	6831      	ldr	r1, [r6, #0]
 8000884:	4605      	mov	r5, r0
 8000886:	b911      	cbnz	r1, 800088e <sbrk_aligned+0x12>
 8000888:	f000 fc34 	bl	80010f4 <_sbrk_r>
 800088c:	6030      	str	r0, [r6, #0]
 800088e:	4621      	mov	r1, r4
 8000890:	4628      	mov	r0, r5
 8000892:	f000 fc2f 	bl	80010f4 <_sbrk_r>
 8000896:	1c43      	adds	r3, r0, #1
 8000898:	d103      	bne.n	80008a2 <sbrk_aligned+0x26>
 800089a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800089e:	4620      	mov	r0, r4
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	1cc4      	adds	r4, r0, #3
 80008a4:	f024 0403 	bic.w	r4, r4, #3
 80008a8:	42a0      	cmp	r0, r4
 80008aa:	d0f8      	beq.n	800089e <sbrk_aligned+0x22>
 80008ac:	1a21      	subs	r1, r4, r0
 80008ae:	4628      	mov	r0, r5
 80008b0:	f000 fc20 	bl	80010f4 <_sbrk_r>
 80008b4:	3001      	adds	r0, #1
 80008b6:	d1f2      	bne.n	800089e <sbrk_aligned+0x22>
 80008b8:	e7ef      	b.n	800089a <sbrk_aligned+0x1e>
 80008ba:	bf00      	nop
 80008bc:	200001b0 	.word	0x200001b0

080008c0 <_malloc_r>:
 80008c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008c4:	1ccd      	adds	r5, r1, #3
 80008c6:	f025 0503 	bic.w	r5, r5, #3
 80008ca:	3508      	adds	r5, #8
 80008cc:	2d0c      	cmp	r5, #12
 80008ce:	bf38      	it	cc
 80008d0:	250c      	movcc	r5, #12
 80008d2:	2d00      	cmp	r5, #0
 80008d4:	4606      	mov	r6, r0
 80008d6:	db01      	blt.n	80008dc <_malloc_r+0x1c>
 80008d8:	42a9      	cmp	r1, r5
 80008da:	d904      	bls.n	80008e6 <_malloc_r+0x26>
 80008dc:	230c      	movs	r3, #12
 80008de:	6033      	str	r3, [r6, #0]
 80008e0:	2000      	movs	r0, #0
 80008e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80009bc <_malloc_r+0xfc>
 80008ea:	f000 f869 	bl	80009c0 <__malloc_lock>
 80008ee:	f8d8 3000 	ldr.w	r3, [r8]
 80008f2:	461c      	mov	r4, r3
 80008f4:	bb44      	cbnz	r4, 8000948 <_malloc_r+0x88>
 80008f6:	4629      	mov	r1, r5
 80008f8:	4630      	mov	r0, r6
 80008fa:	f7ff ffbf 	bl	800087c <sbrk_aligned>
 80008fe:	1c43      	adds	r3, r0, #1
 8000900:	4604      	mov	r4, r0
 8000902:	d158      	bne.n	80009b6 <_malloc_r+0xf6>
 8000904:	f8d8 4000 	ldr.w	r4, [r8]
 8000908:	4627      	mov	r7, r4
 800090a:	2f00      	cmp	r7, #0
 800090c:	d143      	bne.n	8000996 <_malloc_r+0xd6>
 800090e:	2c00      	cmp	r4, #0
 8000910:	d04b      	beq.n	80009aa <_malloc_r+0xea>
 8000912:	6823      	ldr	r3, [r4, #0]
 8000914:	4639      	mov	r1, r7
 8000916:	4630      	mov	r0, r6
 8000918:	eb04 0903 	add.w	r9, r4, r3
 800091c:	f000 fbea 	bl	80010f4 <_sbrk_r>
 8000920:	4581      	cmp	r9, r0
 8000922:	d142      	bne.n	80009aa <_malloc_r+0xea>
 8000924:	6821      	ldr	r1, [r4, #0]
 8000926:	1a6d      	subs	r5, r5, r1
 8000928:	4629      	mov	r1, r5
 800092a:	4630      	mov	r0, r6
 800092c:	f7ff ffa6 	bl	800087c <sbrk_aligned>
 8000930:	3001      	adds	r0, #1
 8000932:	d03a      	beq.n	80009aa <_malloc_r+0xea>
 8000934:	6823      	ldr	r3, [r4, #0]
 8000936:	442b      	add	r3, r5
 8000938:	6023      	str	r3, [r4, #0]
 800093a:	f8d8 3000 	ldr.w	r3, [r8]
 800093e:	685a      	ldr	r2, [r3, #4]
 8000940:	bb62      	cbnz	r2, 800099c <_malloc_r+0xdc>
 8000942:	f8c8 7000 	str.w	r7, [r8]
 8000946:	e00f      	b.n	8000968 <_malloc_r+0xa8>
 8000948:	6822      	ldr	r2, [r4, #0]
 800094a:	1b52      	subs	r2, r2, r5
 800094c:	d420      	bmi.n	8000990 <_malloc_r+0xd0>
 800094e:	2a0b      	cmp	r2, #11
 8000950:	d917      	bls.n	8000982 <_malloc_r+0xc2>
 8000952:	1961      	adds	r1, r4, r5
 8000954:	42a3      	cmp	r3, r4
 8000956:	6025      	str	r5, [r4, #0]
 8000958:	bf18      	it	ne
 800095a:	6059      	strne	r1, [r3, #4]
 800095c:	6863      	ldr	r3, [r4, #4]
 800095e:	bf08      	it	eq
 8000960:	f8c8 1000 	streq.w	r1, [r8]
 8000964:	5162      	str	r2, [r4, r5]
 8000966:	604b      	str	r3, [r1, #4]
 8000968:	4630      	mov	r0, r6
 800096a:	f000 f82f 	bl	80009cc <__malloc_unlock>
 800096e:	f104 000b 	add.w	r0, r4, #11
 8000972:	1d23      	adds	r3, r4, #4
 8000974:	f020 0007 	bic.w	r0, r0, #7
 8000978:	1ac2      	subs	r2, r0, r3
 800097a:	bf1c      	itt	ne
 800097c:	1a1b      	subne	r3, r3, r0
 800097e:	50a3      	strne	r3, [r4, r2]
 8000980:	e7af      	b.n	80008e2 <_malloc_r+0x22>
 8000982:	6862      	ldr	r2, [r4, #4]
 8000984:	42a3      	cmp	r3, r4
 8000986:	bf0c      	ite	eq
 8000988:	f8c8 2000 	streq.w	r2, [r8]
 800098c:	605a      	strne	r2, [r3, #4]
 800098e:	e7eb      	b.n	8000968 <_malloc_r+0xa8>
 8000990:	4623      	mov	r3, r4
 8000992:	6864      	ldr	r4, [r4, #4]
 8000994:	e7ae      	b.n	80008f4 <_malloc_r+0x34>
 8000996:	463c      	mov	r4, r7
 8000998:	687f      	ldr	r7, [r7, #4]
 800099a:	e7b6      	b.n	800090a <_malloc_r+0x4a>
 800099c:	461a      	mov	r2, r3
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	42a3      	cmp	r3, r4
 80009a2:	d1fb      	bne.n	800099c <_malloc_r+0xdc>
 80009a4:	2300      	movs	r3, #0
 80009a6:	6053      	str	r3, [r2, #4]
 80009a8:	e7de      	b.n	8000968 <_malloc_r+0xa8>
 80009aa:	230c      	movs	r3, #12
 80009ac:	6033      	str	r3, [r6, #0]
 80009ae:	4630      	mov	r0, r6
 80009b0:	f000 f80c 	bl	80009cc <__malloc_unlock>
 80009b4:	e794      	b.n	80008e0 <_malloc_r+0x20>
 80009b6:	6005      	str	r5, [r0, #0]
 80009b8:	e7d6      	b.n	8000968 <_malloc_r+0xa8>
 80009ba:	bf00      	nop
 80009bc:	200001b4 	.word	0x200001b4

080009c0 <__malloc_lock>:
 80009c0:	4801      	ldr	r0, [pc, #4]	@ (80009c8 <__malloc_lock+0x8>)
 80009c2:	f7ff bf0f 	b.w	80007e4 <__retarget_lock_acquire_recursive>
 80009c6:	bf00      	nop
 80009c8:	200001ac 	.word	0x200001ac

080009cc <__malloc_unlock>:
 80009cc:	4801      	ldr	r0, [pc, #4]	@ (80009d4 <__malloc_unlock+0x8>)
 80009ce:	f7ff bf0a 	b.w	80007e6 <__retarget_lock_release_recursive>
 80009d2:	bf00      	nop
 80009d4:	200001ac 	.word	0x200001ac

080009d8 <_sungetc_r>:
 80009d8:	b538      	push	{r3, r4, r5, lr}
 80009da:	1c4b      	adds	r3, r1, #1
 80009dc:	4614      	mov	r4, r2
 80009de:	d103      	bne.n	80009e8 <_sungetc_r+0x10>
 80009e0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80009e4:	4628      	mov	r0, r5
 80009e6:	bd38      	pop	{r3, r4, r5, pc}
 80009e8:	8993      	ldrh	r3, [r2, #12]
 80009ea:	f023 0320 	bic.w	r3, r3, #32
 80009ee:	8193      	strh	r3, [r2, #12]
 80009f0:	6853      	ldr	r3, [r2, #4]
 80009f2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80009f4:	b2cd      	uxtb	r5, r1
 80009f6:	b18a      	cbz	r2, 8000a1c <_sungetc_r+0x44>
 80009f8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80009fa:	429a      	cmp	r2, r3
 80009fc:	dd08      	ble.n	8000a10 <_sungetc_r+0x38>
 80009fe:	6823      	ldr	r3, [r4, #0]
 8000a00:	1e5a      	subs	r2, r3, #1
 8000a02:	6022      	str	r2, [r4, #0]
 8000a04:	f803 5c01 	strb.w	r5, [r3, #-1]
 8000a08:	6863      	ldr	r3, [r4, #4]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	6063      	str	r3, [r4, #4]
 8000a0e:	e7e9      	b.n	80009e4 <_sungetc_r+0xc>
 8000a10:	4621      	mov	r1, r4
 8000a12:	f000 fb34 	bl	800107e <__submore>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	d0f1      	beq.n	80009fe <_sungetc_r+0x26>
 8000a1a:	e7e1      	b.n	80009e0 <_sungetc_r+0x8>
 8000a1c:	6921      	ldr	r1, [r4, #16]
 8000a1e:	6822      	ldr	r2, [r4, #0]
 8000a20:	b141      	cbz	r1, 8000a34 <_sungetc_r+0x5c>
 8000a22:	4291      	cmp	r1, r2
 8000a24:	d206      	bcs.n	8000a34 <_sungetc_r+0x5c>
 8000a26:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8000a2a:	42a9      	cmp	r1, r5
 8000a2c:	d102      	bne.n	8000a34 <_sungetc_r+0x5c>
 8000a2e:	3a01      	subs	r2, #1
 8000a30:	6022      	str	r2, [r4, #0]
 8000a32:	e7ea      	b.n	8000a0a <_sungetc_r+0x32>
 8000a34:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8000a38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000a3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8000a3e:	2303      	movs	r3, #3
 8000a40:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000a42:	4623      	mov	r3, r4
 8000a44:	f803 5f46 	strb.w	r5, [r3, #70]!
 8000a48:	6023      	str	r3, [r4, #0]
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e7de      	b.n	8000a0c <_sungetc_r+0x34>

08000a4e <__ssrefill_r>:
 8000a4e:	b510      	push	{r4, lr}
 8000a50:	460c      	mov	r4, r1
 8000a52:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8000a54:	b169      	cbz	r1, 8000a72 <__ssrefill_r+0x24>
 8000a56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000a5a:	4299      	cmp	r1, r3
 8000a5c:	d001      	beq.n	8000a62 <__ssrefill_r+0x14>
 8000a5e:	f7ff fec3 	bl	80007e8 <_free_r>
 8000a62:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000a64:	6063      	str	r3, [r4, #4]
 8000a66:	2000      	movs	r0, #0
 8000a68:	6360      	str	r0, [r4, #52]	@ 0x34
 8000a6a:	b113      	cbz	r3, 8000a72 <__ssrefill_r+0x24>
 8000a6c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000a6e:	6023      	str	r3, [r4, #0]
 8000a70:	bd10      	pop	{r4, pc}
 8000a72:	6923      	ldr	r3, [r4, #16]
 8000a74:	6023      	str	r3, [r4, #0]
 8000a76:	2300      	movs	r3, #0
 8000a78:	6063      	str	r3, [r4, #4]
 8000a7a:	89a3      	ldrh	r3, [r4, #12]
 8000a7c:	f043 0320 	orr.w	r3, r3, #32
 8000a80:	81a3      	strh	r3, [r4, #12]
 8000a82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a86:	e7f3      	b.n	8000a70 <__ssrefill_r+0x22>

08000a88 <__ssvfiscanf_r>:
 8000a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a8c:	460c      	mov	r4, r1
 8000a8e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8000a92:	2100      	movs	r1, #0
 8000a94:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8000a98:	49a5      	ldr	r1, [pc, #660]	@ (8000d30 <__ssvfiscanf_r+0x2a8>)
 8000a9a:	91a0      	str	r1, [sp, #640]	@ 0x280
 8000a9c:	f10d 0804 	add.w	r8, sp, #4
 8000aa0:	49a4      	ldr	r1, [pc, #656]	@ (8000d34 <__ssvfiscanf_r+0x2ac>)
 8000aa2:	4fa5      	ldr	r7, [pc, #660]	@ (8000d38 <__ssvfiscanf_r+0x2b0>)
 8000aa4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8000aa8:	4606      	mov	r6, r0
 8000aaa:	91a1      	str	r1, [sp, #644]	@ 0x284
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	7813      	ldrb	r3, [r2, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f000 8158 	beq.w	8000d66 <__ssvfiscanf_r+0x2de>
 8000ab6:	5cf9      	ldrb	r1, [r7, r3]
 8000ab8:	f011 0108 	ands.w	r1, r1, #8
 8000abc:	f102 0501 	add.w	r5, r2, #1
 8000ac0:	d019      	beq.n	8000af6 <__ssvfiscanf_r+0x6e>
 8000ac2:	6863      	ldr	r3, [r4, #4]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	dd0f      	ble.n	8000ae8 <__ssvfiscanf_r+0x60>
 8000ac8:	6823      	ldr	r3, [r4, #0]
 8000aca:	781a      	ldrb	r2, [r3, #0]
 8000acc:	5cba      	ldrb	r2, [r7, r2]
 8000ace:	0712      	lsls	r2, r2, #28
 8000ad0:	d401      	bmi.n	8000ad6 <__ssvfiscanf_r+0x4e>
 8000ad2:	462a      	mov	r2, r5
 8000ad4:	e7eb      	b.n	8000aae <__ssvfiscanf_r+0x26>
 8000ad6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000ad8:	3201      	adds	r2, #1
 8000ada:	9245      	str	r2, [sp, #276]	@ 0x114
 8000adc:	6862      	ldr	r2, [r4, #4]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	3a01      	subs	r2, #1
 8000ae2:	6062      	str	r2, [r4, #4]
 8000ae4:	6023      	str	r3, [r4, #0]
 8000ae6:	e7ec      	b.n	8000ac2 <__ssvfiscanf_r+0x3a>
 8000ae8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000aea:	4621      	mov	r1, r4
 8000aec:	4630      	mov	r0, r6
 8000aee:	4798      	blx	r3
 8000af0:	2800      	cmp	r0, #0
 8000af2:	d0e9      	beq.n	8000ac8 <__ssvfiscanf_r+0x40>
 8000af4:	e7ed      	b.n	8000ad2 <__ssvfiscanf_r+0x4a>
 8000af6:	2b25      	cmp	r3, #37	@ 0x25
 8000af8:	d012      	beq.n	8000b20 <__ssvfiscanf_r+0x98>
 8000afa:	4699      	mov	r9, r3
 8000afc:	6863      	ldr	r3, [r4, #4]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f340 8093 	ble.w	8000c2a <__ssvfiscanf_r+0x1a2>
 8000b04:	6822      	ldr	r2, [r4, #0]
 8000b06:	7813      	ldrb	r3, [r2, #0]
 8000b08:	454b      	cmp	r3, r9
 8000b0a:	f040 812c 	bne.w	8000d66 <__ssvfiscanf_r+0x2de>
 8000b0e:	6863      	ldr	r3, [r4, #4]
 8000b10:	3b01      	subs	r3, #1
 8000b12:	6063      	str	r3, [r4, #4]
 8000b14:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8000b16:	3201      	adds	r2, #1
 8000b18:	3301      	adds	r3, #1
 8000b1a:	6022      	str	r2, [r4, #0]
 8000b1c:	9345      	str	r3, [sp, #276]	@ 0x114
 8000b1e:	e7d8      	b.n	8000ad2 <__ssvfiscanf_r+0x4a>
 8000b20:	9141      	str	r1, [sp, #260]	@ 0x104
 8000b22:	9143      	str	r1, [sp, #268]	@ 0x10c
 8000b24:	7853      	ldrb	r3, [r2, #1]
 8000b26:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b28:	bf02      	ittt	eq
 8000b2a:	2310      	moveq	r3, #16
 8000b2c:	1c95      	addeq	r5, r2, #2
 8000b2e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8000b30:	220a      	movs	r2, #10
 8000b32:	46a9      	mov	r9, r5
 8000b34:	f819 1b01 	ldrb.w	r1, [r9], #1
 8000b38:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8000b3c:	2b09      	cmp	r3, #9
 8000b3e:	d91e      	bls.n	8000b7e <__ssvfiscanf_r+0xf6>
 8000b40:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8000d3c <__ssvfiscanf_r+0x2b4>
 8000b44:	2203      	movs	r2, #3
 8000b46:	4650      	mov	r0, sl
 8000b48:	f7ff fb4a 	bl	80001e0 <memchr>
 8000b4c:	b138      	cbz	r0, 8000b5e <__ssvfiscanf_r+0xd6>
 8000b4e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000b50:	eba0 000a 	sub.w	r0, r0, sl
 8000b54:	2301      	movs	r3, #1
 8000b56:	4083      	lsls	r3, r0
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	9341      	str	r3, [sp, #260]	@ 0x104
 8000b5c:	464d      	mov	r5, r9
 8000b5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000b62:	2b78      	cmp	r3, #120	@ 0x78
 8000b64:	d806      	bhi.n	8000b74 <__ssvfiscanf_r+0xec>
 8000b66:	2b57      	cmp	r3, #87	@ 0x57
 8000b68:	d810      	bhi.n	8000b8c <__ssvfiscanf_r+0x104>
 8000b6a:	2b25      	cmp	r3, #37	@ 0x25
 8000b6c:	d0c5      	beq.n	8000afa <__ssvfiscanf_r+0x72>
 8000b6e:	d857      	bhi.n	8000c20 <__ssvfiscanf_r+0x198>
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d065      	beq.n	8000c40 <__ssvfiscanf_r+0x1b8>
 8000b74:	2303      	movs	r3, #3
 8000b76:	9347      	str	r3, [sp, #284]	@ 0x11c
 8000b78:	230a      	movs	r3, #10
 8000b7a:	9342      	str	r3, [sp, #264]	@ 0x108
 8000b7c:	e078      	b.n	8000c70 <__ssvfiscanf_r+0x1e8>
 8000b7e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8000b80:	fb02 1103 	mla	r1, r2, r3, r1
 8000b84:	3930      	subs	r1, #48	@ 0x30
 8000b86:	9143      	str	r1, [sp, #268]	@ 0x10c
 8000b88:	464d      	mov	r5, r9
 8000b8a:	e7d2      	b.n	8000b32 <__ssvfiscanf_r+0xaa>
 8000b8c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8000b90:	2a20      	cmp	r2, #32
 8000b92:	d8ef      	bhi.n	8000b74 <__ssvfiscanf_r+0xec>
 8000b94:	a101      	add	r1, pc, #4	@ (adr r1, 8000b9c <__ssvfiscanf_r+0x114>)
 8000b96:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8000b9a:	bf00      	nop
 8000b9c:	08000c4f 	.word	0x08000c4f
 8000ba0:	08000b75 	.word	0x08000b75
 8000ba4:	08000b75 	.word	0x08000b75
 8000ba8:	08000ca9 	.word	0x08000ca9
 8000bac:	08000b75 	.word	0x08000b75
 8000bb0:	08000b75 	.word	0x08000b75
 8000bb4:	08000b75 	.word	0x08000b75
 8000bb8:	08000b75 	.word	0x08000b75
 8000bbc:	08000b75 	.word	0x08000b75
 8000bc0:	08000b75 	.word	0x08000b75
 8000bc4:	08000b75 	.word	0x08000b75
 8000bc8:	08000cbf 	.word	0x08000cbf
 8000bcc:	08000ca5 	.word	0x08000ca5
 8000bd0:	08000c27 	.word	0x08000c27
 8000bd4:	08000c27 	.word	0x08000c27
 8000bd8:	08000c27 	.word	0x08000c27
 8000bdc:	08000b75 	.word	0x08000b75
 8000be0:	08000c61 	.word	0x08000c61
 8000be4:	08000b75 	.word	0x08000b75
 8000be8:	08000b75 	.word	0x08000b75
 8000bec:	08000b75 	.word	0x08000b75
 8000bf0:	08000b75 	.word	0x08000b75
 8000bf4:	08000ccf 	.word	0x08000ccf
 8000bf8:	08000c69 	.word	0x08000c69
 8000bfc:	08000c47 	.word	0x08000c47
 8000c00:	08000b75 	.word	0x08000b75
 8000c04:	08000b75 	.word	0x08000b75
 8000c08:	08000ccb 	.word	0x08000ccb
 8000c0c:	08000b75 	.word	0x08000b75
 8000c10:	08000ca5 	.word	0x08000ca5
 8000c14:	08000b75 	.word	0x08000b75
 8000c18:	08000b75 	.word	0x08000b75
 8000c1c:	08000c4f 	.word	0x08000c4f
 8000c20:	3b45      	subs	r3, #69	@ 0x45
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d8a6      	bhi.n	8000b74 <__ssvfiscanf_r+0xec>
 8000c26:	2305      	movs	r3, #5
 8000c28:	e021      	b.n	8000c6e <__ssvfiscanf_r+0x1e6>
 8000c2a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000c2c:	4621      	mov	r1, r4
 8000c2e:	4630      	mov	r0, r6
 8000c30:	4798      	blx	r3
 8000c32:	2800      	cmp	r0, #0
 8000c34:	f43f af66 	beq.w	8000b04 <__ssvfiscanf_r+0x7c>
 8000c38:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8000c3a:	2800      	cmp	r0, #0
 8000c3c:	f040 808b 	bne.w	8000d56 <__ssvfiscanf_r+0x2ce>
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c44:	e08b      	b.n	8000d5e <__ssvfiscanf_r+0x2d6>
 8000c46:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000c48:	f042 0220 	orr.w	r2, r2, #32
 8000c4c:	9241      	str	r2, [sp, #260]	@ 0x104
 8000c4e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000c50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000c54:	9241      	str	r2, [sp, #260]	@ 0x104
 8000c56:	2210      	movs	r2, #16
 8000c58:	2b6e      	cmp	r3, #110	@ 0x6e
 8000c5a:	9242      	str	r2, [sp, #264]	@ 0x108
 8000c5c:	d902      	bls.n	8000c64 <__ssvfiscanf_r+0x1dc>
 8000c5e:	e005      	b.n	8000c6c <__ssvfiscanf_r+0x1e4>
 8000c60:	2300      	movs	r3, #0
 8000c62:	9342      	str	r3, [sp, #264]	@ 0x108
 8000c64:	2303      	movs	r3, #3
 8000c66:	e002      	b.n	8000c6e <__ssvfiscanf_r+0x1e6>
 8000c68:	2308      	movs	r3, #8
 8000c6a:	9342      	str	r3, [sp, #264]	@ 0x108
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8000c70:	6863      	ldr	r3, [r4, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	dd39      	ble.n	8000cea <__ssvfiscanf_r+0x262>
 8000c76:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000c78:	0659      	lsls	r1, r3, #25
 8000c7a:	d404      	bmi.n	8000c86 <__ssvfiscanf_r+0x1fe>
 8000c7c:	6823      	ldr	r3, [r4, #0]
 8000c7e:	781a      	ldrb	r2, [r3, #0]
 8000c80:	5cba      	ldrb	r2, [r7, r2]
 8000c82:	0712      	lsls	r2, r2, #28
 8000c84:	d438      	bmi.n	8000cf8 <__ssvfiscanf_r+0x270>
 8000c86:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	dc47      	bgt.n	8000d1c <__ssvfiscanf_r+0x294>
 8000c8c:	466b      	mov	r3, sp
 8000c8e:	4622      	mov	r2, r4
 8000c90:	a941      	add	r1, sp, #260	@ 0x104
 8000c92:	4630      	mov	r0, r6
 8000c94:	f000 f86c 	bl	8000d70 <_scanf_chars>
 8000c98:	2801      	cmp	r0, #1
 8000c9a:	d064      	beq.n	8000d66 <__ssvfiscanf_r+0x2de>
 8000c9c:	2802      	cmp	r0, #2
 8000c9e:	f47f af18 	bne.w	8000ad2 <__ssvfiscanf_r+0x4a>
 8000ca2:	e7c9      	b.n	8000c38 <__ssvfiscanf_r+0x1b0>
 8000ca4:	220a      	movs	r2, #10
 8000ca6:	e7d7      	b.n	8000c58 <__ssvfiscanf_r+0x1d0>
 8000ca8:	4629      	mov	r1, r5
 8000caa:	4640      	mov	r0, r8
 8000cac:	f000 f9ae 	bl	800100c <__sccl>
 8000cb0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000cb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cb6:	9341      	str	r3, [sp, #260]	@ 0x104
 8000cb8:	4605      	mov	r5, r0
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e7d7      	b.n	8000c6e <__ssvfiscanf_r+0x1e6>
 8000cbe:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000cc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cc4:	9341      	str	r3, [sp, #260]	@ 0x104
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e7d1      	b.n	8000c6e <__ssvfiscanf_r+0x1e6>
 8000cca:	2302      	movs	r3, #2
 8000ccc:	e7cf      	b.n	8000c6e <__ssvfiscanf_r+0x1e6>
 8000cce:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8000cd0:	06c3      	lsls	r3, r0, #27
 8000cd2:	f53f aefe 	bmi.w	8000ad2 <__ssvfiscanf_r+0x4a>
 8000cd6:	9b00      	ldr	r3, [sp, #0]
 8000cd8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000cda:	1d19      	adds	r1, r3, #4
 8000cdc:	9100      	str	r1, [sp, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	07c0      	lsls	r0, r0, #31
 8000ce2:	bf4c      	ite	mi
 8000ce4:	801a      	strhmi	r2, [r3, #0]
 8000ce6:	601a      	strpl	r2, [r3, #0]
 8000ce8:	e6f3      	b.n	8000ad2 <__ssvfiscanf_r+0x4a>
 8000cea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000cec:	4621      	mov	r1, r4
 8000cee:	4630      	mov	r0, r6
 8000cf0:	4798      	blx	r3
 8000cf2:	2800      	cmp	r0, #0
 8000cf4:	d0bf      	beq.n	8000c76 <__ssvfiscanf_r+0x1ee>
 8000cf6:	e79f      	b.n	8000c38 <__ssvfiscanf_r+0x1b0>
 8000cf8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000cfa:	3201      	adds	r2, #1
 8000cfc:	9245      	str	r2, [sp, #276]	@ 0x114
 8000cfe:	6862      	ldr	r2, [r4, #4]
 8000d00:	3a01      	subs	r2, #1
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	6062      	str	r2, [r4, #4]
 8000d06:	dd02      	ble.n	8000d0e <__ssvfiscanf_r+0x286>
 8000d08:	3301      	adds	r3, #1
 8000d0a:	6023      	str	r3, [r4, #0]
 8000d0c:	e7b6      	b.n	8000c7c <__ssvfiscanf_r+0x1f4>
 8000d0e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000d10:	4621      	mov	r1, r4
 8000d12:	4630      	mov	r0, r6
 8000d14:	4798      	blx	r3
 8000d16:	2800      	cmp	r0, #0
 8000d18:	d0b0      	beq.n	8000c7c <__ssvfiscanf_r+0x1f4>
 8000d1a:	e78d      	b.n	8000c38 <__ssvfiscanf_r+0x1b0>
 8000d1c:	2b04      	cmp	r3, #4
 8000d1e:	dc0f      	bgt.n	8000d40 <__ssvfiscanf_r+0x2b8>
 8000d20:	466b      	mov	r3, sp
 8000d22:	4622      	mov	r2, r4
 8000d24:	a941      	add	r1, sp, #260	@ 0x104
 8000d26:	4630      	mov	r0, r6
 8000d28:	f000 f87c 	bl	8000e24 <_scanf_i>
 8000d2c:	e7b4      	b.n	8000c98 <__ssvfiscanf_r+0x210>
 8000d2e:	bf00      	nop
 8000d30:	080009d9 	.word	0x080009d9
 8000d34:	08000a4f 	.word	0x08000a4f
 8000d38:	08001420 	.word	0x08001420
 8000d3c:	08001400 	.word	0x08001400
 8000d40:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <__ssvfiscanf_r+0x2e4>)
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f43f aec5 	beq.w	8000ad2 <__ssvfiscanf_r+0x4a>
 8000d48:	466b      	mov	r3, sp
 8000d4a:	4622      	mov	r2, r4
 8000d4c:	a941      	add	r1, sp, #260	@ 0x104
 8000d4e:	4630      	mov	r0, r6
 8000d50:	f3af 8000 	nop.w
 8000d54:	e7a0      	b.n	8000c98 <__ssvfiscanf_r+0x210>
 8000d56:	89a3      	ldrh	r3, [r4, #12]
 8000d58:	065b      	lsls	r3, r3, #25
 8000d5a:	f53f af71 	bmi.w	8000c40 <__ssvfiscanf_r+0x1b8>
 8000d5e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8000d68:	e7f9      	b.n	8000d5e <__ssvfiscanf_r+0x2d6>
 8000d6a:	bf00      	nop
 8000d6c:	00000000 	.word	0x00000000

08000d70 <_scanf_chars>:
 8000d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d74:	4615      	mov	r5, r2
 8000d76:	688a      	ldr	r2, [r1, #8]
 8000d78:	4680      	mov	r8, r0
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	b932      	cbnz	r2, 8000d8c <_scanf_chars+0x1c>
 8000d7e:	698a      	ldr	r2, [r1, #24]
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	bf14      	ite	ne
 8000d84:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8000d88:	2201      	moveq	r2, #1
 8000d8a:	608a      	str	r2, [r1, #8]
 8000d8c:	6822      	ldr	r2, [r4, #0]
 8000d8e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8000e20 <_scanf_chars+0xb0>
 8000d92:	06d1      	lsls	r1, r2, #27
 8000d94:	bf5f      	itttt	pl
 8000d96:	681a      	ldrpl	r2, [r3, #0]
 8000d98:	1d11      	addpl	r1, r2, #4
 8000d9a:	6019      	strpl	r1, [r3, #0]
 8000d9c:	6816      	ldrpl	r6, [r2, #0]
 8000d9e:	2700      	movs	r7, #0
 8000da0:	69a0      	ldr	r0, [r4, #24]
 8000da2:	b188      	cbz	r0, 8000dc8 <_scanf_chars+0x58>
 8000da4:	2801      	cmp	r0, #1
 8000da6:	d107      	bne.n	8000db8 <_scanf_chars+0x48>
 8000da8:	682b      	ldr	r3, [r5, #0]
 8000daa:	781a      	ldrb	r2, [r3, #0]
 8000dac:	6963      	ldr	r3, [r4, #20]
 8000dae:	5c9b      	ldrb	r3, [r3, r2]
 8000db0:	b953      	cbnz	r3, 8000dc8 <_scanf_chars+0x58>
 8000db2:	2f00      	cmp	r7, #0
 8000db4:	d031      	beq.n	8000e1a <_scanf_chars+0xaa>
 8000db6:	e022      	b.n	8000dfe <_scanf_chars+0x8e>
 8000db8:	2802      	cmp	r0, #2
 8000dba:	d120      	bne.n	8000dfe <_scanf_chars+0x8e>
 8000dbc:	682b      	ldr	r3, [r5, #0]
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8000dc4:	071b      	lsls	r3, r3, #28
 8000dc6:	d41a      	bmi.n	8000dfe <_scanf_chars+0x8e>
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	06da      	lsls	r2, r3, #27
 8000dcc:	bf5e      	ittt	pl
 8000dce:	682b      	ldrpl	r3, [r5, #0]
 8000dd0:	781b      	ldrbpl	r3, [r3, #0]
 8000dd2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8000dd6:	682a      	ldr	r2, [r5, #0]
 8000dd8:	686b      	ldr	r3, [r5, #4]
 8000dda:	3201      	adds	r2, #1
 8000ddc:	602a      	str	r2, [r5, #0]
 8000dde:	68a2      	ldr	r2, [r4, #8]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	3a01      	subs	r2, #1
 8000de4:	606b      	str	r3, [r5, #4]
 8000de6:	3701      	adds	r7, #1
 8000de8:	60a2      	str	r2, [r4, #8]
 8000dea:	b142      	cbz	r2, 8000dfe <_scanf_chars+0x8e>
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	dcd7      	bgt.n	8000da0 <_scanf_chars+0x30>
 8000df0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8000df4:	4629      	mov	r1, r5
 8000df6:	4640      	mov	r0, r8
 8000df8:	4798      	blx	r3
 8000dfa:	2800      	cmp	r0, #0
 8000dfc:	d0d0      	beq.n	8000da0 <_scanf_chars+0x30>
 8000dfe:	6823      	ldr	r3, [r4, #0]
 8000e00:	f013 0310 	ands.w	r3, r3, #16
 8000e04:	d105      	bne.n	8000e12 <_scanf_chars+0xa2>
 8000e06:	68e2      	ldr	r2, [r4, #12]
 8000e08:	3201      	adds	r2, #1
 8000e0a:	60e2      	str	r2, [r4, #12]
 8000e0c:	69a2      	ldr	r2, [r4, #24]
 8000e0e:	b102      	cbz	r2, 8000e12 <_scanf_chars+0xa2>
 8000e10:	7033      	strb	r3, [r6, #0]
 8000e12:	6923      	ldr	r3, [r4, #16]
 8000e14:	443b      	add	r3, r7
 8000e16:	6123      	str	r3, [r4, #16]
 8000e18:	2000      	movs	r0, #0
 8000e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e1e:	bf00      	nop
 8000e20:	08001420 	.word	0x08001420

08000e24 <_scanf_i>:
 8000e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e28:	4698      	mov	r8, r3
 8000e2a:	4b74      	ldr	r3, [pc, #464]	@ (8000ffc <_scanf_i+0x1d8>)
 8000e2c:	460c      	mov	r4, r1
 8000e2e:	4682      	mov	sl, r0
 8000e30:	4616      	mov	r6, r2
 8000e32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e36:	b087      	sub	sp, #28
 8000e38:	ab03      	add	r3, sp, #12
 8000e3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000e3e:	4b70      	ldr	r3, [pc, #448]	@ (8001000 <_scanf_i+0x1dc>)
 8000e40:	69a1      	ldr	r1, [r4, #24]
 8000e42:	4a70      	ldr	r2, [pc, #448]	@ (8001004 <_scanf_i+0x1e0>)
 8000e44:	2903      	cmp	r1, #3
 8000e46:	bf08      	it	eq
 8000e48:	461a      	moveq	r2, r3
 8000e4a:	68a3      	ldr	r3, [r4, #8]
 8000e4c:	9201      	str	r2, [sp, #4]
 8000e4e:	1e5a      	subs	r2, r3, #1
 8000e50:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8000e54:	bf88      	it	hi
 8000e56:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8000e5a:	4627      	mov	r7, r4
 8000e5c:	bf82      	ittt	hi
 8000e5e:	eb03 0905 	addhi.w	r9, r3, r5
 8000e62:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8000e66:	60a3      	strhi	r3, [r4, #8]
 8000e68:	f857 3b1c 	ldr.w	r3, [r7], #28
 8000e6c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8000e70:	bf98      	it	ls
 8000e72:	f04f 0900 	movls.w	r9, #0
 8000e76:	6023      	str	r3, [r4, #0]
 8000e78:	463d      	mov	r5, r7
 8000e7a:	f04f 0b00 	mov.w	fp, #0
 8000e7e:	6831      	ldr	r1, [r6, #0]
 8000e80:	ab03      	add	r3, sp, #12
 8000e82:	7809      	ldrb	r1, [r1, #0]
 8000e84:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8000e88:	2202      	movs	r2, #2
 8000e8a:	f7ff f9a9 	bl	80001e0 <memchr>
 8000e8e:	b328      	cbz	r0, 8000edc <_scanf_i+0xb8>
 8000e90:	f1bb 0f01 	cmp.w	fp, #1
 8000e94:	d159      	bne.n	8000f4a <_scanf_i+0x126>
 8000e96:	6862      	ldr	r2, [r4, #4]
 8000e98:	b92a      	cbnz	r2, 8000ea6 <_scanf_i+0x82>
 8000e9a:	6822      	ldr	r2, [r4, #0]
 8000e9c:	2108      	movs	r1, #8
 8000e9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000ea2:	6061      	str	r1, [r4, #4]
 8000ea4:	6022      	str	r2, [r4, #0]
 8000ea6:	6822      	ldr	r2, [r4, #0]
 8000ea8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8000eac:	6022      	str	r2, [r4, #0]
 8000eae:	68a2      	ldr	r2, [r4, #8]
 8000eb0:	1e51      	subs	r1, r2, #1
 8000eb2:	60a1      	str	r1, [r4, #8]
 8000eb4:	b192      	cbz	r2, 8000edc <_scanf_i+0xb8>
 8000eb6:	6832      	ldr	r2, [r6, #0]
 8000eb8:	1c51      	adds	r1, r2, #1
 8000eba:	6031      	str	r1, [r6, #0]
 8000ebc:	7812      	ldrb	r2, [r2, #0]
 8000ebe:	f805 2b01 	strb.w	r2, [r5], #1
 8000ec2:	6872      	ldr	r2, [r6, #4]
 8000ec4:	3a01      	subs	r2, #1
 8000ec6:	2a00      	cmp	r2, #0
 8000ec8:	6072      	str	r2, [r6, #4]
 8000eca:	dc07      	bgt.n	8000edc <_scanf_i+0xb8>
 8000ecc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8000ed0:	4631      	mov	r1, r6
 8000ed2:	4650      	mov	r0, sl
 8000ed4:	4790      	blx	r2
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	f040 8085 	bne.w	8000fe6 <_scanf_i+0x1c2>
 8000edc:	f10b 0b01 	add.w	fp, fp, #1
 8000ee0:	f1bb 0f03 	cmp.w	fp, #3
 8000ee4:	d1cb      	bne.n	8000e7e <_scanf_i+0x5a>
 8000ee6:	6863      	ldr	r3, [r4, #4]
 8000ee8:	b90b      	cbnz	r3, 8000eee <_scanf_i+0xca>
 8000eea:	230a      	movs	r3, #10
 8000eec:	6063      	str	r3, [r4, #4]
 8000eee:	6863      	ldr	r3, [r4, #4]
 8000ef0:	4945      	ldr	r1, [pc, #276]	@ (8001008 <_scanf_i+0x1e4>)
 8000ef2:	6960      	ldr	r0, [r4, #20]
 8000ef4:	1ac9      	subs	r1, r1, r3
 8000ef6:	f000 f889 	bl	800100c <__sccl>
 8000efa:	f04f 0b00 	mov.w	fp, #0
 8000efe:	68a3      	ldr	r3, [r4, #8]
 8000f00:	6822      	ldr	r2, [r4, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d03d      	beq.n	8000f82 <_scanf_i+0x15e>
 8000f06:	6831      	ldr	r1, [r6, #0]
 8000f08:	6960      	ldr	r0, [r4, #20]
 8000f0a:	f891 c000 	ldrb.w	ip, [r1]
 8000f0e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8000f12:	2800      	cmp	r0, #0
 8000f14:	d035      	beq.n	8000f82 <_scanf_i+0x15e>
 8000f16:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8000f1a:	d124      	bne.n	8000f66 <_scanf_i+0x142>
 8000f1c:	0510      	lsls	r0, r2, #20
 8000f1e:	d522      	bpl.n	8000f66 <_scanf_i+0x142>
 8000f20:	f10b 0b01 	add.w	fp, fp, #1
 8000f24:	f1b9 0f00 	cmp.w	r9, #0
 8000f28:	d003      	beq.n	8000f32 <_scanf_i+0x10e>
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8000f30:	60a3      	str	r3, [r4, #8]
 8000f32:	6873      	ldr	r3, [r6, #4]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	6073      	str	r3, [r6, #4]
 8000f3a:	dd1b      	ble.n	8000f74 <_scanf_i+0x150>
 8000f3c:	6833      	ldr	r3, [r6, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	6033      	str	r3, [r6, #0]
 8000f42:	68a3      	ldr	r3, [r4, #8]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	60a3      	str	r3, [r4, #8]
 8000f48:	e7d9      	b.n	8000efe <_scanf_i+0xda>
 8000f4a:	f1bb 0f02 	cmp.w	fp, #2
 8000f4e:	d1ae      	bne.n	8000eae <_scanf_i+0x8a>
 8000f50:	6822      	ldr	r2, [r4, #0]
 8000f52:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8000f56:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8000f5a:	d1bf      	bne.n	8000edc <_scanf_i+0xb8>
 8000f5c:	2110      	movs	r1, #16
 8000f5e:	6061      	str	r1, [r4, #4]
 8000f60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000f64:	e7a2      	b.n	8000eac <_scanf_i+0x88>
 8000f66:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8000f6a:	6022      	str	r2, [r4, #0]
 8000f6c:	780b      	ldrb	r3, [r1, #0]
 8000f6e:	f805 3b01 	strb.w	r3, [r5], #1
 8000f72:	e7de      	b.n	8000f32 <_scanf_i+0x10e>
 8000f74:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8000f78:	4631      	mov	r1, r6
 8000f7a:	4650      	mov	r0, sl
 8000f7c:	4798      	blx	r3
 8000f7e:	2800      	cmp	r0, #0
 8000f80:	d0df      	beq.n	8000f42 <_scanf_i+0x11e>
 8000f82:	6823      	ldr	r3, [r4, #0]
 8000f84:	05d9      	lsls	r1, r3, #23
 8000f86:	d50d      	bpl.n	8000fa4 <_scanf_i+0x180>
 8000f88:	42bd      	cmp	r5, r7
 8000f8a:	d909      	bls.n	8000fa0 <_scanf_i+0x17c>
 8000f8c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8000f90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8000f94:	4632      	mov	r2, r6
 8000f96:	4650      	mov	r0, sl
 8000f98:	4798      	blx	r3
 8000f9a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8000f9e:	464d      	mov	r5, r9
 8000fa0:	42bd      	cmp	r5, r7
 8000fa2:	d028      	beq.n	8000ff6 <_scanf_i+0x1d2>
 8000fa4:	6822      	ldr	r2, [r4, #0]
 8000fa6:	f012 0210 	ands.w	r2, r2, #16
 8000faa:	d113      	bne.n	8000fd4 <_scanf_i+0x1b0>
 8000fac:	702a      	strb	r2, [r5, #0]
 8000fae:	6863      	ldr	r3, [r4, #4]
 8000fb0:	9e01      	ldr	r6, [sp, #4]
 8000fb2:	4639      	mov	r1, r7
 8000fb4:	4650      	mov	r0, sl
 8000fb6:	47b0      	blx	r6
 8000fb8:	f8d8 3000 	ldr.w	r3, [r8]
 8000fbc:	6821      	ldr	r1, [r4, #0]
 8000fbe:	1d1a      	adds	r2, r3, #4
 8000fc0:	f8c8 2000 	str.w	r2, [r8]
 8000fc4:	f011 0f20 	tst.w	r1, #32
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	d00f      	beq.n	8000fec <_scanf_i+0x1c8>
 8000fcc:	6018      	str	r0, [r3, #0]
 8000fce:	68e3      	ldr	r3, [r4, #12]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	60e3      	str	r3, [r4, #12]
 8000fd4:	6923      	ldr	r3, [r4, #16]
 8000fd6:	1bed      	subs	r5, r5, r7
 8000fd8:	445d      	add	r5, fp
 8000fda:	442b      	add	r3, r5
 8000fdc:	6123      	str	r3, [r4, #16]
 8000fde:	2000      	movs	r0, #0
 8000fe0:	b007      	add	sp, #28
 8000fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fe6:	f04f 0b00 	mov.w	fp, #0
 8000fea:	e7ca      	b.n	8000f82 <_scanf_i+0x15e>
 8000fec:	07ca      	lsls	r2, r1, #31
 8000fee:	bf4c      	ite	mi
 8000ff0:	8018      	strhmi	r0, [r3, #0]
 8000ff2:	6018      	strpl	r0, [r3, #0]
 8000ff4:	e7eb      	b.n	8000fce <_scanf_i+0x1aa>
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	e7f2      	b.n	8000fe0 <_scanf_i+0x1bc>
 8000ffa:	bf00      	nop
 8000ffc:	080013f4 	.word	0x080013f4
 8001000:	08001281 	.word	0x08001281
 8001004:	08001361 	.word	0x08001361
 8001008:	08001414 	.word	0x08001414

0800100c <__sccl>:
 800100c:	b570      	push	{r4, r5, r6, lr}
 800100e:	780b      	ldrb	r3, [r1, #0]
 8001010:	4604      	mov	r4, r0
 8001012:	2b5e      	cmp	r3, #94	@ 0x5e
 8001014:	bf0b      	itete	eq
 8001016:	784b      	ldrbeq	r3, [r1, #1]
 8001018:	1c4a      	addne	r2, r1, #1
 800101a:	1c8a      	addeq	r2, r1, #2
 800101c:	2100      	movne	r1, #0
 800101e:	bf08      	it	eq
 8001020:	2101      	moveq	r1, #1
 8001022:	3801      	subs	r0, #1
 8001024:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8001028:	f800 1f01 	strb.w	r1, [r0, #1]!
 800102c:	42a8      	cmp	r0, r5
 800102e:	d1fb      	bne.n	8001028 <__sccl+0x1c>
 8001030:	b90b      	cbnz	r3, 8001036 <__sccl+0x2a>
 8001032:	1e50      	subs	r0, r2, #1
 8001034:	bd70      	pop	{r4, r5, r6, pc}
 8001036:	f081 0101 	eor.w	r1, r1, #1
 800103a:	54e1      	strb	r1, [r4, r3]
 800103c:	4610      	mov	r0, r2
 800103e:	4602      	mov	r2, r0
 8001040:	f812 5b01 	ldrb.w	r5, [r2], #1
 8001044:	2d2d      	cmp	r5, #45	@ 0x2d
 8001046:	d005      	beq.n	8001054 <__sccl+0x48>
 8001048:	2d5d      	cmp	r5, #93	@ 0x5d
 800104a:	d016      	beq.n	800107a <__sccl+0x6e>
 800104c:	2d00      	cmp	r5, #0
 800104e:	d0f1      	beq.n	8001034 <__sccl+0x28>
 8001050:	462b      	mov	r3, r5
 8001052:	e7f2      	b.n	800103a <__sccl+0x2e>
 8001054:	7846      	ldrb	r6, [r0, #1]
 8001056:	2e5d      	cmp	r6, #93	@ 0x5d
 8001058:	d0fa      	beq.n	8001050 <__sccl+0x44>
 800105a:	42b3      	cmp	r3, r6
 800105c:	dcf8      	bgt.n	8001050 <__sccl+0x44>
 800105e:	3002      	adds	r0, #2
 8001060:	461a      	mov	r2, r3
 8001062:	3201      	adds	r2, #1
 8001064:	4296      	cmp	r6, r2
 8001066:	54a1      	strb	r1, [r4, r2]
 8001068:	dcfb      	bgt.n	8001062 <__sccl+0x56>
 800106a:	1af2      	subs	r2, r6, r3
 800106c:	3a01      	subs	r2, #1
 800106e:	1c5d      	adds	r5, r3, #1
 8001070:	42b3      	cmp	r3, r6
 8001072:	bfa8      	it	ge
 8001074:	2200      	movge	r2, #0
 8001076:	18ab      	adds	r3, r5, r2
 8001078:	e7e1      	b.n	800103e <__sccl+0x32>
 800107a:	4610      	mov	r0, r2
 800107c:	e7da      	b.n	8001034 <__sccl+0x28>

0800107e <__submore>:
 800107e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001082:	460c      	mov	r4, r1
 8001084:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8001086:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800108a:	4299      	cmp	r1, r3
 800108c:	d11d      	bne.n	80010ca <__submore+0x4c>
 800108e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001092:	f7ff fc15 	bl	80008c0 <_malloc_r>
 8001096:	b918      	cbnz	r0, 80010a0 <__submore+0x22>
 8001098:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800109c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010a4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80010a6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80010aa:	6360      	str	r0, [r4, #52]	@ 0x34
 80010ac:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80010b0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80010b4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80010b8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80010bc:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80010c0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80010c4:	6020      	str	r0, [r4, #0]
 80010c6:	2000      	movs	r0, #0
 80010c8:	e7e8      	b.n	800109c <__submore+0x1e>
 80010ca:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80010cc:	0077      	lsls	r7, r6, #1
 80010ce:	463a      	mov	r2, r7
 80010d0:	f000 f82e 	bl	8001130 <_realloc_r>
 80010d4:	4605      	mov	r5, r0
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d0de      	beq.n	8001098 <__submore+0x1a>
 80010da:	eb00 0806 	add.w	r8, r0, r6
 80010de:	4601      	mov	r1, r0
 80010e0:	4632      	mov	r2, r6
 80010e2:	4640      	mov	r0, r8
 80010e4:	f000 f816 	bl	8001114 <memcpy>
 80010e8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80010ec:	f8c4 8000 	str.w	r8, [r4]
 80010f0:	e7e9      	b.n	80010c6 <__submore+0x48>
	...

080010f4 <_sbrk_r>:
 80010f4:	b538      	push	{r3, r4, r5, lr}
 80010f6:	4d06      	ldr	r5, [pc, #24]	@ (8001110 <_sbrk_r+0x1c>)
 80010f8:	2300      	movs	r3, #0
 80010fa:	4604      	mov	r4, r0
 80010fc:	4608      	mov	r0, r1
 80010fe:	602b      	str	r3, [r5, #0]
 8001100:	f7ff f9a8 	bl	8000454 <_sbrk>
 8001104:	1c43      	adds	r3, r0, #1
 8001106:	d102      	bne.n	800110e <_sbrk_r+0x1a>
 8001108:	682b      	ldr	r3, [r5, #0]
 800110a:	b103      	cbz	r3, 800110e <_sbrk_r+0x1a>
 800110c:	6023      	str	r3, [r4, #0]
 800110e:	bd38      	pop	{r3, r4, r5, pc}
 8001110:	200001a8 	.word	0x200001a8

08001114 <memcpy>:
 8001114:	440a      	add	r2, r1
 8001116:	4291      	cmp	r1, r2
 8001118:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800111c:	d100      	bne.n	8001120 <memcpy+0xc>
 800111e:	4770      	bx	lr
 8001120:	b510      	push	{r4, lr}
 8001122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800112a:	4291      	cmp	r1, r2
 800112c:	d1f9      	bne.n	8001122 <memcpy+0xe>
 800112e:	bd10      	pop	{r4, pc}

08001130 <_realloc_r>:
 8001130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001134:	4680      	mov	r8, r0
 8001136:	4615      	mov	r5, r2
 8001138:	460c      	mov	r4, r1
 800113a:	b921      	cbnz	r1, 8001146 <_realloc_r+0x16>
 800113c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001140:	4611      	mov	r1, r2
 8001142:	f7ff bbbd 	b.w	80008c0 <_malloc_r>
 8001146:	b92a      	cbnz	r2, 8001154 <_realloc_r+0x24>
 8001148:	f7ff fb4e 	bl	80007e8 <_free_r>
 800114c:	2400      	movs	r4, #0
 800114e:	4620      	mov	r0, r4
 8001150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001154:	f000 f906 	bl	8001364 <_malloc_usable_size_r>
 8001158:	4285      	cmp	r5, r0
 800115a:	4606      	mov	r6, r0
 800115c:	d802      	bhi.n	8001164 <_realloc_r+0x34>
 800115e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001162:	d8f4      	bhi.n	800114e <_realloc_r+0x1e>
 8001164:	4629      	mov	r1, r5
 8001166:	4640      	mov	r0, r8
 8001168:	f7ff fbaa 	bl	80008c0 <_malloc_r>
 800116c:	4607      	mov	r7, r0
 800116e:	2800      	cmp	r0, #0
 8001170:	d0ec      	beq.n	800114c <_realloc_r+0x1c>
 8001172:	42b5      	cmp	r5, r6
 8001174:	462a      	mov	r2, r5
 8001176:	4621      	mov	r1, r4
 8001178:	bf28      	it	cs
 800117a:	4632      	movcs	r2, r6
 800117c:	f7ff ffca 	bl	8001114 <memcpy>
 8001180:	4621      	mov	r1, r4
 8001182:	4640      	mov	r0, r8
 8001184:	f7ff fb30 	bl	80007e8 <_free_r>
 8001188:	463c      	mov	r4, r7
 800118a:	e7e0      	b.n	800114e <_realloc_r+0x1e>

0800118c <_strtol_l.constprop.0>:
 800118c:	2b24      	cmp	r3, #36	@ 0x24
 800118e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001192:	4686      	mov	lr, r0
 8001194:	4690      	mov	r8, r2
 8001196:	d801      	bhi.n	800119c <_strtol_l.constprop.0+0x10>
 8001198:	2b01      	cmp	r3, #1
 800119a:	d106      	bne.n	80011aa <_strtol_l.constprop.0+0x1e>
 800119c:	f7ff faf8 	bl	8000790 <__errno>
 80011a0:	2316      	movs	r3, #22
 80011a2:	6003      	str	r3, [r0, #0]
 80011a4:	2000      	movs	r0, #0
 80011a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011aa:	4834      	ldr	r0, [pc, #208]	@ (800127c <_strtol_l.constprop.0+0xf0>)
 80011ac:	460d      	mov	r5, r1
 80011ae:	462a      	mov	r2, r5
 80011b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80011b4:	5d06      	ldrb	r6, [r0, r4]
 80011b6:	f016 0608 	ands.w	r6, r6, #8
 80011ba:	d1f8      	bne.n	80011ae <_strtol_l.constprop.0+0x22>
 80011bc:	2c2d      	cmp	r4, #45	@ 0x2d
 80011be:	d12d      	bne.n	800121c <_strtol_l.constprop.0+0x90>
 80011c0:	782c      	ldrb	r4, [r5, #0]
 80011c2:	2601      	movs	r6, #1
 80011c4:	1c95      	adds	r5, r2, #2
 80011c6:	f033 0210 	bics.w	r2, r3, #16
 80011ca:	d109      	bne.n	80011e0 <_strtol_l.constprop.0+0x54>
 80011cc:	2c30      	cmp	r4, #48	@ 0x30
 80011ce:	d12a      	bne.n	8001226 <_strtol_l.constprop.0+0x9a>
 80011d0:	782a      	ldrb	r2, [r5, #0]
 80011d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80011d6:	2a58      	cmp	r2, #88	@ 0x58
 80011d8:	d125      	bne.n	8001226 <_strtol_l.constprop.0+0x9a>
 80011da:	786c      	ldrb	r4, [r5, #1]
 80011dc:	2310      	movs	r3, #16
 80011de:	3502      	adds	r5, #2
 80011e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80011e4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80011e8:	2200      	movs	r2, #0
 80011ea:	fbbc f9f3 	udiv	r9, ip, r3
 80011ee:	4610      	mov	r0, r2
 80011f0:	fb03 ca19 	mls	sl, r3, r9, ip
 80011f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80011f8:	2f09      	cmp	r7, #9
 80011fa:	d81b      	bhi.n	8001234 <_strtol_l.constprop.0+0xa8>
 80011fc:	463c      	mov	r4, r7
 80011fe:	42a3      	cmp	r3, r4
 8001200:	dd27      	ble.n	8001252 <_strtol_l.constprop.0+0xc6>
 8001202:	1c57      	adds	r7, r2, #1
 8001204:	d007      	beq.n	8001216 <_strtol_l.constprop.0+0x8a>
 8001206:	4581      	cmp	r9, r0
 8001208:	d320      	bcc.n	800124c <_strtol_l.constprop.0+0xc0>
 800120a:	d101      	bne.n	8001210 <_strtol_l.constprop.0+0x84>
 800120c:	45a2      	cmp	sl, r4
 800120e:	db1d      	blt.n	800124c <_strtol_l.constprop.0+0xc0>
 8001210:	fb00 4003 	mla	r0, r0, r3, r4
 8001214:	2201      	movs	r2, #1
 8001216:	f815 4b01 	ldrb.w	r4, [r5], #1
 800121a:	e7eb      	b.n	80011f4 <_strtol_l.constprop.0+0x68>
 800121c:	2c2b      	cmp	r4, #43	@ 0x2b
 800121e:	bf04      	itt	eq
 8001220:	782c      	ldrbeq	r4, [r5, #0]
 8001222:	1c95      	addeq	r5, r2, #2
 8001224:	e7cf      	b.n	80011c6 <_strtol_l.constprop.0+0x3a>
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1da      	bne.n	80011e0 <_strtol_l.constprop.0+0x54>
 800122a:	2c30      	cmp	r4, #48	@ 0x30
 800122c:	bf0c      	ite	eq
 800122e:	2308      	moveq	r3, #8
 8001230:	230a      	movne	r3, #10
 8001232:	e7d5      	b.n	80011e0 <_strtol_l.constprop.0+0x54>
 8001234:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8001238:	2f19      	cmp	r7, #25
 800123a:	d801      	bhi.n	8001240 <_strtol_l.constprop.0+0xb4>
 800123c:	3c37      	subs	r4, #55	@ 0x37
 800123e:	e7de      	b.n	80011fe <_strtol_l.constprop.0+0x72>
 8001240:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8001244:	2f19      	cmp	r7, #25
 8001246:	d804      	bhi.n	8001252 <_strtol_l.constprop.0+0xc6>
 8001248:	3c57      	subs	r4, #87	@ 0x57
 800124a:	e7d8      	b.n	80011fe <_strtol_l.constprop.0+0x72>
 800124c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001250:	e7e1      	b.n	8001216 <_strtol_l.constprop.0+0x8a>
 8001252:	1c53      	adds	r3, r2, #1
 8001254:	d108      	bne.n	8001268 <_strtol_l.constprop.0+0xdc>
 8001256:	2322      	movs	r3, #34	@ 0x22
 8001258:	f8ce 3000 	str.w	r3, [lr]
 800125c:	4660      	mov	r0, ip
 800125e:	f1b8 0f00 	cmp.w	r8, #0
 8001262:	d0a0      	beq.n	80011a6 <_strtol_l.constprop.0+0x1a>
 8001264:	1e69      	subs	r1, r5, #1
 8001266:	e006      	b.n	8001276 <_strtol_l.constprop.0+0xea>
 8001268:	b106      	cbz	r6, 800126c <_strtol_l.constprop.0+0xe0>
 800126a:	4240      	negs	r0, r0
 800126c:	f1b8 0f00 	cmp.w	r8, #0
 8001270:	d099      	beq.n	80011a6 <_strtol_l.constprop.0+0x1a>
 8001272:	2a00      	cmp	r2, #0
 8001274:	d1f6      	bne.n	8001264 <_strtol_l.constprop.0+0xd8>
 8001276:	f8c8 1000 	str.w	r1, [r8]
 800127a:	e794      	b.n	80011a6 <_strtol_l.constprop.0+0x1a>
 800127c:	08001420 	.word	0x08001420

08001280 <_strtol_r>:
 8001280:	f7ff bf84 	b.w	800118c <_strtol_l.constprop.0>

08001284 <_strtoul_l.constprop.0>:
 8001284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001288:	4e34      	ldr	r6, [pc, #208]	@ (800135c <_strtoul_l.constprop.0+0xd8>)
 800128a:	4686      	mov	lr, r0
 800128c:	460d      	mov	r5, r1
 800128e:	4628      	mov	r0, r5
 8001290:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001294:	5d37      	ldrb	r7, [r6, r4]
 8001296:	f017 0708 	ands.w	r7, r7, #8
 800129a:	d1f8      	bne.n	800128e <_strtoul_l.constprop.0+0xa>
 800129c:	2c2d      	cmp	r4, #45	@ 0x2d
 800129e:	d12f      	bne.n	8001300 <_strtoul_l.constprop.0+0x7c>
 80012a0:	782c      	ldrb	r4, [r5, #0]
 80012a2:	2701      	movs	r7, #1
 80012a4:	1c85      	adds	r5, r0, #2
 80012a6:	f033 0010 	bics.w	r0, r3, #16
 80012aa:	d109      	bne.n	80012c0 <_strtoul_l.constprop.0+0x3c>
 80012ac:	2c30      	cmp	r4, #48	@ 0x30
 80012ae:	d12c      	bne.n	800130a <_strtoul_l.constprop.0+0x86>
 80012b0:	7828      	ldrb	r0, [r5, #0]
 80012b2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80012b6:	2858      	cmp	r0, #88	@ 0x58
 80012b8:	d127      	bne.n	800130a <_strtoul_l.constprop.0+0x86>
 80012ba:	786c      	ldrb	r4, [r5, #1]
 80012bc:	2310      	movs	r3, #16
 80012be:	3502      	adds	r5, #2
 80012c0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80012c4:	2600      	movs	r6, #0
 80012c6:	fbb8 f8f3 	udiv	r8, r8, r3
 80012ca:	fb03 f908 	mul.w	r9, r3, r8
 80012ce:	ea6f 0909 	mvn.w	r9, r9
 80012d2:	4630      	mov	r0, r6
 80012d4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80012d8:	f1bc 0f09 	cmp.w	ip, #9
 80012dc:	d81c      	bhi.n	8001318 <_strtoul_l.constprop.0+0x94>
 80012de:	4664      	mov	r4, ip
 80012e0:	42a3      	cmp	r3, r4
 80012e2:	dd2a      	ble.n	800133a <_strtoul_l.constprop.0+0xb6>
 80012e4:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80012e8:	d007      	beq.n	80012fa <_strtoul_l.constprop.0+0x76>
 80012ea:	4580      	cmp	r8, r0
 80012ec:	d322      	bcc.n	8001334 <_strtoul_l.constprop.0+0xb0>
 80012ee:	d101      	bne.n	80012f4 <_strtoul_l.constprop.0+0x70>
 80012f0:	45a1      	cmp	r9, r4
 80012f2:	db1f      	blt.n	8001334 <_strtoul_l.constprop.0+0xb0>
 80012f4:	fb00 4003 	mla	r0, r0, r3, r4
 80012f8:	2601      	movs	r6, #1
 80012fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80012fe:	e7e9      	b.n	80012d4 <_strtoul_l.constprop.0+0x50>
 8001300:	2c2b      	cmp	r4, #43	@ 0x2b
 8001302:	bf04      	itt	eq
 8001304:	782c      	ldrbeq	r4, [r5, #0]
 8001306:	1c85      	addeq	r5, r0, #2
 8001308:	e7cd      	b.n	80012a6 <_strtoul_l.constprop.0+0x22>
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1d8      	bne.n	80012c0 <_strtoul_l.constprop.0+0x3c>
 800130e:	2c30      	cmp	r4, #48	@ 0x30
 8001310:	bf0c      	ite	eq
 8001312:	2308      	moveq	r3, #8
 8001314:	230a      	movne	r3, #10
 8001316:	e7d3      	b.n	80012c0 <_strtoul_l.constprop.0+0x3c>
 8001318:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800131c:	f1bc 0f19 	cmp.w	ip, #25
 8001320:	d801      	bhi.n	8001326 <_strtoul_l.constprop.0+0xa2>
 8001322:	3c37      	subs	r4, #55	@ 0x37
 8001324:	e7dc      	b.n	80012e0 <_strtoul_l.constprop.0+0x5c>
 8001326:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800132a:	f1bc 0f19 	cmp.w	ip, #25
 800132e:	d804      	bhi.n	800133a <_strtoul_l.constprop.0+0xb6>
 8001330:	3c57      	subs	r4, #87	@ 0x57
 8001332:	e7d5      	b.n	80012e0 <_strtoul_l.constprop.0+0x5c>
 8001334:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8001338:	e7df      	b.n	80012fa <_strtoul_l.constprop.0+0x76>
 800133a:	1c73      	adds	r3, r6, #1
 800133c:	d106      	bne.n	800134c <_strtoul_l.constprop.0+0xc8>
 800133e:	2322      	movs	r3, #34	@ 0x22
 8001340:	f8ce 3000 	str.w	r3, [lr]
 8001344:	4630      	mov	r0, r6
 8001346:	b932      	cbnz	r2, 8001356 <_strtoul_l.constprop.0+0xd2>
 8001348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800134c:	b107      	cbz	r7, 8001350 <_strtoul_l.constprop.0+0xcc>
 800134e:	4240      	negs	r0, r0
 8001350:	2a00      	cmp	r2, #0
 8001352:	d0f9      	beq.n	8001348 <_strtoul_l.constprop.0+0xc4>
 8001354:	b106      	cbz	r6, 8001358 <_strtoul_l.constprop.0+0xd4>
 8001356:	1e69      	subs	r1, r5, #1
 8001358:	6011      	str	r1, [r2, #0]
 800135a:	e7f5      	b.n	8001348 <_strtoul_l.constprop.0+0xc4>
 800135c:	08001420 	.word	0x08001420

08001360 <_strtoul_r>:
 8001360:	f7ff bf90 	b.w	8001284 <_strtoul_l.constprop.0>

08001364 <_malloc_usable_size_r>:
 8001364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001368:	1f18      	subs	r0, r3, #4
 800136a:	2b00      	cmp	r3, #0
 800136c:	bfbc      	itt	lt
 800136e:	580b      	ldrlt	r3, [r1, r0]
 8001370:	18c0      	addlt	r0, r0, r3
 8001372:	4770      	bx	lr

08001374 <_init>:
 8001374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001376:	bf00      	nop
 8001378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800137a:	bc08      	pop	{r3}
 800137c:	469e      	mov	lr, r3
 800137e:	4770      	bx	lr

08001380 <_fini>:
 8001380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001382:	bf00      	nop
 8001384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001386:	bc08      	pop	{r3}
 8001388:	469e      	mov	lr, r3
 800138a:	4770      	bx	lr
