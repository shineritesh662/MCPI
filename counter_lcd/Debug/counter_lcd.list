
counter_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004e8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000670  08000670  00001670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000690  08000690  00002004  2**0
                  CONTENTS
  4 .ARM          00000008  08000690  08000690  00001690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000698  08000698  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000698  08000698  00001698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800069c  0800069c  0000169c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080006a0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000024  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001305  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005be  00000000  00000000  00003333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000100  00000000  00000000  000038f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000aa  00000000  00000000  000039f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001818c  00000000  00000000  00003aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001558  00000000  00000000  0001bc2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008be14  00000000  00000000  0001d186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a8f9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000270  00000000  00000000  000a8fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a9250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000049  00000000  00000000  000a926f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000658 	.word	0x08000658

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000658 	.word	0x08000658

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80001e0:	4b0e      	ldr	r3, [pc, #56]	@ (800021c <DelayMs+0x44>)
 80001e2:	685b      	ldr	r3, [r3, #4]
 80001e4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80001e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000220 <DelayMs+0x48>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000224 <DelayMs+0x4c>)
 80001ec:	fba2 2303 	umull	r2, r3, r2, r3
 80001f0:	099b      	lsrs	r3, r3, #6
 80001f2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	68ba      	ldr	r2, [r7, #8]
 80001f8:	fb02 f303 	mul.w	r3, r2, r3
 80001fc:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80001fe:	bf00      	nop
 8000200:	4b06      	ldr	r3, [pc, #24]	@ (800021c <DelayMs+0x44>)
 8000202:	685a      	ldr	r2, [r3, #4]
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	1ad2      	subs	r2, r2, r3
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	429a      	cmp	r2, r3
 800020c:	d3f8      	bcc.n	8000200 <DelayMs+0x28>
}
 800020e:	bf00      	nop
 8000210:	bf00      	nop
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e0001000 	.word	0xe0001000
 8000220:	20000000 	.word	0x20000000
 8000224:	10624dd3 	.word	0x10624dd3

08000228 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void count_str(char *c);
int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b09a      	sub	sp, #104	@ 0x68
 800022c:	af00      	add	r7, sp, #0

	SystemInit();
 800022e:	f000 f8f9 	bl	8000424 <SystemInit>
	inituart(9600);
 8000232:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000236:	f000 f92b 	bl	8000490 <inituart>
	SwitchInit();
 800023a:	f000 f8af 	bl	800039c <SwitchInit>
	//uint8_t count = 0;
	uartputs("Sunbeam @ PG-DESD\r\n");
 800023e:	4811      	ldr	r0, [pc, #68]	@ (8000284 <main+0x5c>)
 8000240:	f000 f9a0 	bl	8000584 <uartputs>
	char str[100];
    while(1)
    {
    	while(switch_flag == 0)
 8000244:	bf00      	nop
 8000246:	4b10      	ldr	r3, [pc, #64]	@ (8000288 <main+0x60>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d0fb      	beq.n	8000246 <main+0x1e>
    		;
    	DelayMs(500);
 800024e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000252:	f7ff ffc1 	bl	80001d8 <DelayMs>
        uartputs("count: ");
 8000256:	480d      	ldr	r0, [pc, #52]	@ (800028c <main+0x64>)
 8000258:	f000 f994 	bl	8000584 <uartputs>
        count++;
 800025c:	4b0c      	ldr	r3, [pc, #48]	@ (8000290 <main+0x68>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	3301      	adds	r3, #1
 8000262:	4a0b      	ldr	r2, [pc, #44]	@ (8000290 <main+0x68>)
 8000264:	6013      	str	r3, [r2, #0]

    	count_str(str);
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	4618      	mov	r0, r3
 800026a:	f000 f815 	bl	8000298 <count_str>
    	uartputs(str);
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f987 	bl	8000584 <uartputs>
    	uartputs("\r\n");
 8000276:	4807      	ldr	r0, [pc, #28]	@ (8000294 <main+0x6c>)
 8000278:	f000 f984 	bl	8000584 <uartputs>
    	switch_flag = 0;
 800027c:	4b02      	ldr	r3, [pc, #8]	@ (8000288 <main+0x60>)
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
    	while(switch_flag == 0)
 8000282:	e7df      	b.n	8000244 <main+0x1c>
 8000284:	08000670 	.word	0x08000670
 8000288:	20000020 	.word	0x20000020
 800028c:	08000684 	.word	0x08000684
 8000290:	20000024 	.word	0x20000024
 8000294:	0800068c 	.word	0x0800068c

08000298 <count_str>:
	return 0;
}


void count_str(char *c)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b088      	sub	sp, #32
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]



	   int temp = count;
 80002a0:	4b2e      	ldr	r3, [pc, #184]	@ (800035c <count_str+0xc4>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	61fb      	str	r3, [r7, #28]
	   int i=0;
 80002a6:	2300      	movs	r3, #0
 80002a8:	61bb      	str	r3, [r7, #24]
	   while(temp!=0)
 80002aa:	e01f      	b.n	80002ec <count_str+0x54>
	   {
	       int last_digit = temp%10;
 80002ac:	69fa      	ldr	r2, [r7, #28]
 80002ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000360 <count_str+0xc8>)
 80002b0:	fb83 1302 	smull	r1, r3, r3, r2
 80002b4:	1099      	asrs	r1, r3, #2
 80002b6:	17d3      	asrs	r3, r2, #31
 80002b8:	1ac9      	subs	r1, r1, r3
 80002ba:	460b      	mov	r3, r1
 80002bc:	009b      	lsls	r3, r3, #2
 80002be:	440b      	add	r3, r1
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	1ad3      	subs	r3, r2, r3
 80002c4:	60bb      	str	r3, [r7, #8]
	       c[i++] = last_digit + '0' ;
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	b2da      	uxtb	r2, r3
 80002ca:	69bb      	ldr	r3, [r7, #24]
 80002cc:	1c59      	adds	r1, r3, #1
 80002ce:	61b9      	str	r1, [r7, #24]
 80002d0:	4619      	mov	r1, r3
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	440b      	add	r3, r1
 80002d6:	3230      	adds	r2, #48	@ 0x30
 80002d8:	b2d2      	uxtb	r2, r2
 80002da:	701a      	strb	r2, [r3, #0]
	       temp/=10;
 80002dc:	69fb      	ldr	r3, [r7, #28]
 80002de:	4a20      	ldr	r2, [pc, #128]	@ (8000360 <count_str+0xc8>)
 80002e0:	fb82 1203 	smull	r1, r2, r2, r3
 80002e4:	1092      	asrs	r2, r2, #2
 80002e6:	17db      	asrs	r3, r3, #31
 80002e8:	1ad3      	subs	r3, r2, r3
 80002ea:	61fb      	str	r3, [r7, #28]
	   while(temp!=0)
 80002ec:	69fb      	ldr	r3, [r7, #28]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d1dc      	bne.n	80002ac <count_str+0x14>
	   }
	   c[i] = '\0';
 80002f2:	69bb      	ldr	r3, [r7, #24]
 80002f4:	687a      	ldr	r2, [r7, #4]
 80002f6:	4413      	add	r3, r2
 80002f8:	2200      	movs	r2, #0
 80002fa:	701a      	strb	r2, [r3, #0]

	   int l = strlen(c);
 80002fc:	6878      	ldr	r0, [r7, #4]
 80002fe:	f7ff ff63 	bl	80001c8 <strlen>
 8000302:	4603      	mov	r3, r0
 8000304:	613b      	str	r3, [r7, #16]
	   //printf("Length: %d\n", l);

	   for(int j=0; j<l/2; j++)
 8000306:	2300      	movs	r3, #0
 8000308:	617b      	str	r3, [r7, #20]
 800030a:	e01a      	b.n	8000342 <count_str+0xaa>
	   {
	       char t_c = c[j];
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	4413      	add	r3, r2
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	73fb      	strb	r3, [r7, #15]
	       c[j] = c[l-j-1];
 8000316:	693a      	ldr	r2, [r7, #16]
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	1ad3      	subs	r3, r2, r3
 800031c:	3b01      	subs	r3, #1
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	441a      	add	r2, r3
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	6879      	ldr	r1, [r7, #4]
 8000326:	440b      	add	r3, r1
 8000328:	7812      	ldrb	r2, [r2, #0]
 800032a:	701a      	strb	r2, [r3, #0]
	       c[l-j-1] = t_c;
 800032c:	693a      	ldr	r2, [r7, #16]
 800032e:	697b      	ldr	r3, [r7, #20]
 8000330:	1ad3      	subs	r3, r2, r3
 8000332:	3b01      	subs	r3, #1
 8000334:	687a      	ldr	r2, [r7, #4]
 8000336:	4413      	add	r3, r2
 8000338:	7bfa      	ldrb	r2, [r7, #15]
 800033a:	701a      	strb	r2, [r3, #0]
	   for(int j=0; j<l/2; j++)
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	3301      	adds	r3, #1
 8000340:	617b      	str	r3, [r7, #20]
 8000342:	693b      	ldr	r3, [r7, #16]
 8000344:	0fda      	lsrs	r2, r3, #31
 8000346:	4413      	add	r3, r2
 8000348:	105b      	asrs	r3, r3, #1
 800034a:	461a      	mov	r2, r3
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	4293      	cmp	r3, r2
 8000350:	dbdc      	blt.n	800030c <count_str+0x74>
	   }

}
 8000352:	bf00      	nop
 8000354:	bf00      	nop
 8000356:	3720      	adds	r7, #32
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000024 	.word	0x20000024
 8000360:	66666667 	.word	0x66666667

08000364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800036e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000372:	2b00      	cmp	r3, #0
 8000374:	db0b      	blt.n	800038e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	f003 021f 	and.w	r2, r3, #31
 800037c:	4906      	ldr	r1, [pc, #24]	@ (8000398 <__NVIC_EnableIRQ+0x34>)
 800037e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000382:	095b      	lsrs	r3, r3, #5
 8000384:	2001      	movs	r0, #1
 8000386:	fa00 f202 	lsl.w	r2, r0, r2
 800038a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	e000e100 	.word	0xe000e100

0800039c <SwitchInit>:


#include "switch_inter.h"

void SwitchInit(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0

	GPIO_SWITCH->MODER &= BV((GPIO_SWITCH_PIN>>1) +1);
 80003a0:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <SwitchInit+0x54>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <SwitchInit+0x54>)
 80003a6:	f003 0302 	and.w	r3, r3, #2
 80003aa:	6013      	str	r3, [r2, #0]
	GPIO_SWITCH->MODER |= BV(GPIO_SWITCH_PIN>>1);
 80003ac:	4b10      	ldr	r3, [pc, #64]	@ (80003f0 <SwitchInit+0x54>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a0f      	ldr	r2, [pc, #60]	@ (80003f0 <SwitchInit+0x54>)
 80003b2:	f043 0301 	orr.w	r3, r3, #1
 80003b6:	6013      	str	r3, [r2, #0]

	GPIO_SWITCH->PUPDR &= ~(((GPIO_SWITCH_PIN>>1) +1) | (GPIO_SWITCH_PIN>>1));
 80003b8:	4b0d      	ldr	r3, [pc, #52]	@ (80003f0 <SwitchInit+0x54>)
 80003ba:	68db      	ldr	r3, [r3, #12]
 80003bc:	4a0c      	ldr	r2, [pc, #48]	@ (80003f0 <SwitchInit+0x54>)
 80003be:	f023 0301 	bic.w	r3, r3, #1
 80003c2:	60d3      	str	r3, [r2, #12]

	//Interrupt initialization
	EXTI->FTSR |= BV(SWITCH_EXTI);
 80003c4:	4b0b      	ldr	r3, [pc, #44]	@ (80003f4 <SwitchInit+0x58>)
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	4a0a      	ldr	r2, [pc, #40]	@ (80003f4 <SwitchInit+0x58>)
 80003ca:	f043 0301 	orr.w	r3, r3, #1
 80003ce:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= BV(SWITCH_EXTI);
 80003d0:	4b08      	ldr	r3, [pc, #32]	@ (80003f4 <SwitchInit+0x58>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a07      	ldr	r2, [pc, #28]	@ (80003f4 <SwitchInit+0x58>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6013      	str	r3, [r2, #0]
	SYSCFG->EXTICR[0] = ~(BV(3) | BV(2) | BV(1) | BV(0));
 80003dc:	4b06      	ldr	r3, [pc, #24]	@ (80003f8 <SwitchInit+0x5c>)
 80003de:	f06f 020f 	mvn.w	r2, #15
 80003e2:	609a      	str	r2, [r3, #8]
	NVIC_EnableIRQ(EXTI0_IRQn);
 80003e4:	2006      	movs	r0, #6
 80003e6:	f7ff ffbd 	bl	8000364 <__NVIC_EnableIRQ>
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40020000 	.word	0x40020000
 80003f4:	40013c00 	.word	0x40013c00
 80003f8:	40013800 	.word	0x40013800

080003fc <EXTI0_IRQHandler>:
volatile uint32_t switch_flag = 0;
volatile uint32_t count = 0;


void EXTI0_IRQHandler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0

EXTI->PR |= BV(SWITCH_EXTI);
 8000400:	4b06      	ldr	r3, [pc, #24]	@ (800041c <EXTI0_IRQHandler+0x20>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	4a05      	ldr	r2, [pc, #20]	@ (800041c <EXTI0_IRQHandler+0x20>)
 8000406:	f043 0301 	orr.w	r3, r3, #1
 800040a:	6153      	str	r3, [r2, #20]

  switch_flag = 1;
 800040c:	4b04      	ldr	r3, [pc, #16]	@ (8000420 <EXTI0_IRQHandler+0x24>)
 800040e:	2201      	movs	r2, #1
 8000410:	601a      	str	r2, [r3, #0]
}
 8000412:	bf00      	nop
 8000414:	46bd      	mov	sp, r7
 8000416:	bc80      	pop	{r7}
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	40013c00 	.word	0x40013c00
 8000420:	20000020 	.word	0x20000020

08000424 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  DWT_Init();
 8000428:	f000 f802 	bl	8000430 <DWT_Init>
}
 800042c:	bf00      	nop
 800042e:	bd80      	pop	{r7, pc}

08000430 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000434:	4b14      	ldr	r3, [pc, #80]	@ (8000488 <DWT_Init+0x58>)
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	4a13      	ldr	r2, [pc, #76]	@ (8000488 <DWT_Init+0x58>)
 800043a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800043e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000440:	4b11      	ldr	r3, [pc, #68]	@ (8000488 <DWT_Init+0x58>)
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	4a10      	ldr	r2, [pc, #64]	@ (8000488 <DWT_Init+0x58>)
 8000446:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800044a:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800044c:	4b0f      	ldr	r3, [pc, #60]	@ (800048c <DWT_Init+0x5c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a0e      	ldr	r2, [pc, #56]	@ (800048c <DWT_Init+0x5c>)
 8000452:	f023 0301 	bic.w	r3, r3, #1
 8000456:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000458:	4b0c      	ldr	r3, [pc, #48]	@ (800048c <DWT_Init+0x5c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a0b      	ldr	r2, [pc, #44]	@ (800048c <DWT_Init+0x5c>)
 800045e:	f043 0301 	orr.w	r3, r3, #1
 8000462:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000464:	4b09      	ldr	r3, [pc, #36]	@ (800048c <DWT_Init+0x5c>)
 8000466:	2200      	movs	r2, #0
 8000468:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800046a:	bf00      	nop
    __ASM volatile ("NOP");
 800046c:	bf00      	nop
    __ASM volatile ("NOP");
 800046e:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000470:	4b06      	ldr	r3, [pc, #24]	@ (800048c <DWT_Init+0x5c>)
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	2b00      	cmp	r3, #0
 8000476:	bf0c      	ite	eq
 8000478:	2301      	moveq	r3, #1
 800047a:	2300      	movne	r3, #0
 800047c:	b2db      	uxtb	r3, r3
}
 800047e:	4618      	mov	r0, r3
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	e000edf0 	.word	0xe000edf0
 800048c:	e0001000 	.word	0xe0001000

08000490 <inituart>:
#include"uart.h"
#include "stm32f4xx.h"


void inituart(uint32_t bps)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= BV(GPIO_AHB1ENR_CCLK);
 8000498:	4b2b      	ldr	r3, [pc, #172]	@ (8000548 <inituart+0xb8>)
 800049a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800049c:	4a2a      	ldr	r2, [pc, #168]	@ (8000548 <inituart+0xb8>)
 800049e:	f043 0302 	orr.w	r3, r3, #2
 80004a2:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIO_UART->MODER &= ~(BV(UART_TX*2) | BV(UART_RX*2));
 80004a4:	4b29      	ldr	r3, [pc, #164]	@ (800054c <inituart+0xbc>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a28      	ldr	r2, [pc, #160]	@ (800054c <inituart+0xbc>)
 80004aa:	f423 03a0 	bic.w	r3, r3, #5242880	@ 0x500000
 80004ae:	6013      	str	r3, [r2, #0]
	GPIO_UART->MODER |= (BV((UART_TX*2)+1) | BV((UART_RX*2)+1));
 80004b0:	4b26      	ldr	r3, [pc, #152]	@ (800054c <inituart+0xbc>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a25      	ldr	r2, [pc, #148]	@ (800054c <inituart+0xbc>)
 80004b6:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 80004ba:	6013      	str	r3, [r2, #0]

	GPIO_UART->AFR[1] |= (BV(10)| BV(9) | BV(8) | BV(12) | BV(13) | BV(14));
 80004bc:	4b23      	ldr	r3, [pc, #140]	@ (800054c <inituart+0xbc>)
 80004be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004c0:	4a22      	ldr	r2, [pc, #136]	@ (800054c <inituart+0xbc>)
 80004c2:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80004c6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIO_UART->AFR[1] &= ~(BV(11) | BV(15));
 80004c8:	4b20      	ldr	r3, [pc, #128]	@ (800054c <inituart+0xbc>)
 80004ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004cc:	4a1f      	ldr	r2, [pc, #124]	@ (800054c <inituart+0xbc>)
 80004ce:	f423 4308 	bic.w	r3, r3, #34816	@ 0x8800
 80004d2:	6253      	str	r3, [r2, #36]	@ 0x24

	RCC->APB1ENR |= BV(GPIO_APB1ENR_CCLK);
 80004d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000548 <inituart+0xb8>)
 80004d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000548 <inituart+0xb8>)
 80004da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004de:	6413      	str	r3, [r2, #64]	@ 0x40

	UART->CR1 = (BV(USART_CR1_TE_Pos)|BV(USART_CR1_RE_Pos));
 80004e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000550 <inituart+0xc0>)
 80004e2:	220c      	movs	r2, #12
 80004e4:	60da      	str	r2, [r3, #12]
	UART->CR1 &= ~(BV(USART_CR1_M_Pos) |BV(USART_CR1_OVER8_Pos));
 80004e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000550 <inituart+0xc0>)
 80004e8:	68db      	ldr	r3, [r3, #12]
 80004ea:	4a19      	ldr	r2, [pc, #100]	@ (8000550 <inituart+0xc0>)
 80004ec:	f423 4310 	bic.w	r3, r3, #36864	@ 0x9000
 80004f0:	60d3      	str	r3, [r2, #12]

	UART->CR2 &= ~(USART_CR2_STOP_0 | USART_CR2_STOP_1);
 80004f2:	4b17      	ldr	r3, [pc, #92]	@ (8000550 <inituart+0xc0>)
 80004f4:	691b      	ldr	r3, [r3, #16]
 80004f6:	4a16      	ldr	r2, [pc, #88]	@ (8000550 <inituart+0xc0>)
 80004f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80004fc:	6113      	str	r3, [r2, #16]

	if(bps == 9600)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000504:	d104      	bne.n	8000510 <inituart+0x80>
		UART->BRR = UBRR_9600;
 8000506:	4b12      	ldr	r3, [pc, #72]	@ (8000550 <inituart+0xc0>)
 8000508:	f240 6283 	movw	r2, #1667	@ 0x683
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	e00f      	b.n	8000530 <inituart+0xa0>

	else if(bps == 38400)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000516:	d104      	bne.n	8000522 <inituart+0x92>
			UART->BRR = UBRR_38400;
 8000518:	4b0d      	ldr	r3, [pc, #52]	@ (8000550 <inituart+0xc0>)
 800051a:	f240 12a1 	movw	r2, #417	@ 0x1a1
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	e006      	b.n	8000530 <inituart+0xa0>

	else if (bps == 115200)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000528:	d102      	bne.n	8000530 <inituart+0xa0>
			UART->BRR = UBRR_115200;
 800052a:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <inituart+0xc0>)
 800052c:	228b      	movs	r2, #139	@ 0x8b
 800052e:	609a      	str	r2, [r3, #8]

	UART->CR1 |= BV(USART_CR1_UE_Pos);
 8000530:	4b07      	ldr	r3, [pc, #28]	@ (8000550 <inituart+0xc0>)
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	4a06      	ldr	r2, [pc, #24]	@ (8000550 <inituart+0xc0>)
 8000536:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800053a:	60d3      	str	r3, [r2, #12]

}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40023800 	.word	0x40023800
 800054c:	40020400 	.word	0x40020400
 8000550:	40004800 	.word	0x40004800

08000554 <uartputc>:

void uartputc(uint8_t ch)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
   UART->DR = ch;
 800055e:	4a08      	ldr	r2, [pc, #32]	@ (8000580 <uartputc+0x2c>)
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	6053      	str	r3, [r2, #4]
   while((UART->SR & BV(USART_SR_TXE_Pos)) == 0)
 8000564:	bf00      	nop
 8000566:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <uartputc+0x2c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800056e:	2b00      	cmp	r3, #0
 8000570:	d0f9      	beq.n	8000566 <uartputc+0x12>
	   ;
}
 8000572:	bf00      	nop
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40004800 	.word	0x40004800

08000584 <uartputs>:

void uartputs(char str[])
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i]!='\0'; i++)
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	e009      	b.n	80005a6 <uartputs+0x22>
		uartputc((uint8_t)str[i]);
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	4413      	add	r3, r2
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff ffda 	bl	8000554 <uartputc>
	for(int i=0; str[i]!='\0'; i++)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	3301      	adds	r3, #1
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4413      	add	r3, r2
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1ef      	bne.n	8000592 <uartputs+0xe>
}
 80005b2:	bf00      	nop
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005bc:	480d      	ldr	r0, [pc, #52]	@ (80005f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005c0:	f7ff ff30 	bl	8000424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c4:	480c      	ldr	r0, [pc, #48]	@ (80005f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005c6:	490d      	ldr	r1, [pc, #52]	@ (80005fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000600 <LoopForever+0xe>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a0a      	ldr	r2, [pc, #40]	@ (8000604 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000608 <LoopForever+0x16>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ea:	f000 f811 	bl	8000610 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ee:	f7ff fe1b 	bl	8000228 <main>

080005f2 <LoopForever>:

LoopForever:
  b LoopForever
 80005f2:	e7fe      	b.n	80005f2 <LoopForever>
  ldr   r0, =_estack
 80005f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005fc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000600:	080006a0 	.word	0x080006a0
  ldr r2, =_sbss
 8000604:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000608:	20000028 	.word	0x20000028

0800060c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC_IRQHandler>
	...

08000610 <__libc_init_array>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	4d0d      	ldr	r5, [pc, #52]	@ (8000648 <__libc_init_array+0x38>)
 8000614:	4c0d      	ldr	r4, [pc, #52]	@ (800064c <__libc_init_array+0x3c>)
 8000616:	1b64      	subs	r4, r4, r5
 8000618:	10a4      	asrs	r4, r4, #2
 800061a:	2600      	movs	r6, #0
 800061c:	42a6      	cmp	r6, r4
 800061e:	d109      	bne.n	8000634 <__libc_init_array+0x24>
 8000620:	4d0b      	ldr	r5, [pc, #44]	@ (8000650 <__libc_init_array+0x40>)
 8000622:	4c0c      	ldr	r4, [pc, #48]	@ (8000654 <__libc_init_array+0x44>)
 8000624:	f000 f818 	bl	8000658 <_init>
 8000628:	1b64      	subs	r4, r4, r5
 800062a:	10a4      	asrs	r4, r4, #2
 800062c:	2600      	movs	r6, #0
 800062e:	42a6      	cmp	r6, r4
 8000630:	d105      	bne.n	800063e <__libc_init_array+0x2e>
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f855 3b04 	ldr.w	r3, [r5], #4
 8000638:	4798      	blx	r3
 800063a:	3601      	adds	r6, #1
 800063c:	e7ee      	b.n	800061c <__libc_init_array+0xc>
 800063e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000642:	4798      	blx	r3
 8000644:	3601      	adds	r6, #1
 8000646:	e7f2      	b.n	800062e <__libc_init_array+0x1e>
 8000648:	08000698 	.word	0x08000698
 800064c:	08000698 	.word	0x08000698
 8000650:	08000698 	.word	0x08000698
 8000654:	0800069c 	.word	0x0800069c

08000658 <_init>:
 8000658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800065a:	bf00      	nop
 800065c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800065e:	bc08      	pop	{r3}
 8000660:	469e      	mov	lr, r3
 8000662:	4770      	bx	lr

08000664 <_fini>:
 8000664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000666:	bf00      	nop
 8000668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800066a:	bc08      	pop	{r3}
 800066c:	469e      	mov	lr, r3
 800066e:	4770      	bx	lr
