
interrupt_switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000028c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000414  08000414  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000414  08000414  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000414  08000414  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000414  08000414  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000414  08000414  00001414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000418  08000418  00001418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800041c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000131f  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005c3  00000000  00000000  0000334d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000001b3  00000000  00000000  00003910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000e0  00000000  00000000  00003ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000d4  00000000  00000000  00003ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000180d4  00000000  00000000  00003c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001541  00000000  00000000  0001bd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008bd2a  00000000  00000000  0001d291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  000a8fbb  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000014c  00000000  00000000  000a9000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004e  00000000  00000000  000a914c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003fc 	.word	0x080003fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080003fc 	.word	0x080003fc

080001c8 <led_init>:
 */
#include"led.h"

void  led_init(uint32_t pin)
{
  RCC->AHB1ENR |= BV(GPIO_LED_AHBENR);
 80001c8:	4911      	ldr	r1, [pc, #68]	@ (8000210 <led_init+0x48>)
  GPIO_LED->MODER &= ~(BV((pin<<1) + 1));
 80001ca:	4b12      	ldr	r3, [pc, #72]	@ (8000214 <led_init+0x4c>)
  RCC->AHB1ENR |= BV(GPIO_LED_AHBENR);
 80001cc:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80001ce:	f042 0208 	orr.w	r2, r2, #8
{
 80001d2:	b410      	push	{r4}
  GPIO_LED->MODER &= ~(BV((pin<<1) + 1));
 80001d4:	0040      	lsls	r0, r0, #1
  RCC->AHB1ENR |= BV(GPIO_LED_AHBENR);
 80001d6:	630a      	str	r2, [r1, #48]	@ 0x30
  GPIO_LED->MODER &= ~(BV((pin<<1) + 1));
 80001d8:	2101      	movs	r1, #1
 80001da:	681c      	ldr	r4, [r3, #0]
 80001dc:	1842      	adds	r2, r0, r1
 80001de:	fa01 f202 	lsl.w	r2, r1, r2
 80001e2:	ea24 0402 	bic.w	r4, r4, r2
 80001e6:	601c      	str	r4, [r3, #0]
  GPIO_LED->MODER |= (BV(pin<<1));
 80001e8:	681c      	ldr	r4, [r3, #0]
 80001ea:	4081      	lsls	r1, r0
 80001ec:	430c      	orrs	r4, r1
 80001ee:	601c      	str	r4, [r3, #0]
  GPIO_LED->OTYPER &= ~BV(13);
 80001f0:	6858      	ldr	r0, [r3, #4]
  GPIO_LED->OSPEEDR &= ~(BV((pin<<1) +1) | (BV(pin<<1)));
  GPIO_LED->PUPDR &= ~(BV((pin<<1) +1) | (BV(pin<<1)));

}
 80001f2:	bc10      	pop	{r4}
  GPIO_LED->OTYPER &= ~BV(13);
 80001f4:	f420 5000 	bic.w	r0, r0, #8192	@ 0x2000
 80001f8:	6058      	str	r0, [r3, #4]
  GPIO_LED->OSPEEDR &= ~(BV((pin<<1) +1) | (BV(pin<<1)));
 80001fa:	430a      	orrs	r2, r1
 80001fc:	6899      	ldr	r1, [r3, #8]
 80001fe:	ea21 0102 	bic.w	r1, r1, r2
 8000202:	6099      	str	r1, [r3, #8]
  GPIO_LED->PUPDR &= ~(BV((pin<<1) +1) | (BV(pin<<1)));
 8000204:	68d9      	ldr	r1, [r3, #12]
 8000206:	ea21 0202 	bic.w	r2, r1, r2
 800020a:	60da      	str	r2, [r3, #12]
}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	40023800 	.word	0x40023800
 8000214:	40020c00 	.word	0x40020c00

08000218 <ledblink>:

void led_on(uint32_t pin)
{
	GPIO_LED->ODR |= BV(pin);
 8000218:	4a0f      	ldr	r2, [pc, #60]	@ (8000258 <ledblink+0x40>)
 800021a:	f04f 0c01 	mov.w	ip, #1
 800021e:	6953      	ldr	r3, [r2, #20]
 8000220:	fa0c fc00 	lsl.w	ip, ip, r0
 8000224:	ea4c 0303 	orr.w	r3, ip, r3
#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
	uint32_t init_ticks = DWT->CYCCNT;
	uint32_t ticks = (SystemCoreClock / 1000);
 8000228:	480c      	ldr	r0, [pc, #48]	@ (800025c <ledblink+0x44>)
{
	GPIO_LED->ODR &= ~BV(pin);
}

void ledblink(uint32_t pin, uint32_t delay )
{
 800022a:	b410      	push	{r4}
	GPIO_LED->ODR |= BV(pin);
 800022c:	6153      	str	r3, [r2, #20]
 800022e:	6803      	ldr	r3, [r0, #0]
 8000230:	4c0b      	ldr	r4, [pc, #44]	@ (8000260 <ledblink+0x48>)
	uint32_t init_ticks = DWT->CYCCNT;
 8000232:	4a0c      	ldr	r2, [pc, #48]	@ (8000264 <ledblink+0x4c>)
	uint32_t ticks = (SystemCoreClock / 1000);
 8000234:	fba4 4303 	umull	r4, r3, r4, r3
 8000238:	099b      	lsrs	r3, r3, #6
	uint32_t init_ticks = DWT->CYCCNT;
 800023a:	6850      	ldr	r0, [r2, #4]
	ms *= ticks;
 800023c:	fb03 f101 	mul.w	r1, r3, r1
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000240:	6853      	ldr	r3, [r2, #4]
 8000242:	1a1b      	subs	r3, r3, r0
 8000244:	428b      	cmp	r3, r1
 8000246:	d3fb      	bcc.n	8000240 <ledblink+0x28>
	GPIO_LED->ODR &= ~BV(pin);
 8000248:	4a03      	ldr	r2, [pc, #12]	@ (8000258 <ledblink+0x40>)

	led_on(pin);
	DelayMs(delay);
	led_off(pin);
}
 800024a:	bc10      	pop	{r4}
	GPIO_LED->ODR &= ~BV(pin);
 800024c:	6953      	ldr	r3, [r2, #20]
 800024e:	ea23 030c 	bic.w	r3, r3, ip
 8000252:	6153      	str	r3, [r2, #20]
}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	40020c00 	.word	0x40020c00
 800025c:	20000000 	.word	0x20000000
 8000260:	10624dd3 	.word	0x10624dd3
 8000264:	e0001000 	.word	0xe0001000

08000268 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000268:	b570      	push	{r4, r5, r6, lr}
   SystemInit();
 800026a:	f000 f857 	bl	800031c <SystemInit>
   uint32_t count = 0;
   uint32_t pin = LED_GREEN_PIN;
   led_init(LED_ORANGE_PIN);
 800026e:	200d      	movs	r0, #13
 8000270:	f7ff ffaa 	bl	80001c8 <led_init>
   led_init(LED_GREEN_PIN);
 8000274:	200c      	movs	r0, #12
 8000276:	f7ff ffa7 	bl	80001c8 <led_init>
   led_init(LED_BLUE_PIN);
 800027a:	200f      	movs	r0, #15
 800027c:	f7ff ffa4 	bl	80001c8 <led_init>
   led_init(LED_RED_PIN);
 8000280:	200e      	movs	r0, #14
 8000282:	f7ff ffa1 	bl	80001c8 <led_init>

    SwitchInit();
 8000286:	f000 f815 	bl	80002b4 <SwitchInit>
   uint32_t count = 0;
 800028a:	2500      	movs	r5, #0
 800028c:	4c08      	ldr	r4, [pc, #32]	@ (80002b0 <main+0x48>)
	{
            while(switch_flag == 0);

            ledblink(pin + count , 500);
            count++;
            switch_flag = 0;
 800028e:	462e      	mov	r6, r5
            while(switch_flag == 0);
 8000290:	6823      	ldr	r3, [r4, #0]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d0fc      	beq.n	8000290 <main+0x28>
            ledblink(pin + count , 500);
 8000296:	f105 000c 	add.w	r0, r5, #12
 800029a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
            count++;
 800029e:	3501      	adds	r5, #1
            ledblink(pin + count , 500);
 80002a0:	f7ff ffba 	bl	8000218 <ledblink>
            if(count == 4)
            	count = 0;
 80002a4:	2d04      	cmp	r5, #4
            switch_flag = 0;
 80002a6:	6026      	str	r6, [r4, #0]
            	count = 0;
 80002a8:	bf08      	it	eq
 80002aa:	2500      	moveq	r5, #0
 80002ac:	e7f0      	b.n	8000290 <main+0x28>
 80002ae:	bf00      	nop
 80002b0:	20000020 	.word	0x20000020

080002b4 <SwitchInit>:
#include "switch_inter.h"

void SwitchInit(void)
{

	GPIO_SWITCH->MODER &= BV((GPIO_SWITCH_PIN>>1) +1);
 80002b4:	4b0f      	ldr	r3, [pc, #60]	@ (80002f4 <SwitchInit+0x40>)
	GPIO_SWITCH->MODER |= BV(GPIO_SWITCH_PIN>>1);

	GPIO_SWITCH->PUPDR &= ~(((GPIO_SWITCH_PIN>>1) +1) | (GPIO_SWITCH_PIN>>1));

	//Interrupt initialization
	EXTI->FTSR |= BV(SWITCH_EXTI);
 80002b6:	4a10      	ldr	r2, [pc, #64]	@ (80002f8 <SwitchInit+0x44>)
	GPIO_SWITCH->MODER &= BV((GPIO_SWITCH_PIN>>1) +1);
 80002b8:	6819      	ldr	r1, [r3, #0]
	EXTI->IMR |= BV(SWITCH_EXTI);
	SYSCFG->EXTICR[0] = ~(BV(3) | BV(2) | BV(1) | BV(0));
 80002ba:	4810      	ldr	r0, [pc, #64]	@ (80002fc <SwitchInit+0x48>)
	GPIO_SWITCH->MODER &= BV((GPIO_SWITCH_PIN>>1) +1);
 80002bc:	f001 0102 	and.w	r1, r1, #2
{
 80002c0:	b410      	push	{r4}
	GPIO_SWITCH->MODER &= BV((GPIO_SWITCH_PIN>>1) +1);
 80002c2:	6019      	str	r1, [r3, #0]
	GPIO_SWITCH->MODER |= BV(GPIO_SWITCH_PIN>>1);
 80002c4:	6819      	ldr	r1, [r3, #0]
 80002c6:	f041 0101 	orr.w	r1, r1, #1
 80002ca:	6019      	str	r1, [r3, #0]
	GPIO_SWITCH->PUPDR &= ~(((GPIO_SWITCH_PIN>>1) +1) | (GPIO_SWITCH_PIN>>1));
 80002cc:	68d9      	ldr	r1, [r3, #12]
 80002ce:	f021 0101 	bic.w	r1, r1, #1
 80002d2:	60d9      	str	r1, [r3, #12]
	EXTI->FTSR |= BV(SWITCH_EXTI);
 80002d4:	68d3      	ldr	r3, [r2, #12]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002d6:	490a      	ldr	r1, [pc, #40]	@ (8000300 <SwitchInit+0x4c>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= BV(SWITCH_EXTI);
 80002de:	6813      	ldr	r3, [r2, #0]
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	6013      	str	r3, [r2, #0]
	SYSCFG->EXTICR[0] = ~(BV(3) | BV(2) | BV(1) | BV(0));
 80002e6:	f06f 040f 	mvn.w	r4, #15
 80002ea:	2340      	movs	r3, #64	@ 0x40
 80002ec:	6084      	str	r4, [r0, #8]
	NVIC_EnableIRQ(EXTI0_IRQn);
}
 80002ee:	bc10      	pop	{r4}
 80002f0:	600b      	str	r3, [r1, #0]
 80002f2:	4770      	bx	lr
 80002f4:	40020000 	.word	0x40020000
 80002f8:	40013c00 	.word	0x40013c00
 80002fc:	40013800 	.word	0x40013800
 8000300:	e000e100 	.word	0xe000e100

08000304 <EXTI0_IRQHandler>:
volatile uint32_t switch_flag = 0;

void EXTI0_IRQHandler(void)
{

EXTI->PR |= BV(SWITCH_EXTI);
 8000304:	4a03      	ldr	r2, [pc, #12]	@ (8000314 <EXTI0_IRQHandler+0x10>)
  switch_flag = 1;
 8000306:	4904      	ldr	r1, [pc, #16]	@ (8000318 <EXTI0_IRQHandler+0x14>)
EXTI->PR |= BV(SWITCH_EXTI);
 8000308:	6953      	ldr	r3, [r2, #20]
  switch_flag = 1;
 800030a:	2001      	movs	r0, #1
EXTI->PR |= BV(SWITCH_EXTI);
 800030c:	4303      	orrs	r3, r0
 800030e:	6153      	str	r3, [r2, #20]
  switch_flag = 1;
 8000310:	6008      	str	r0, [r1, #0]
}
 8000312:	4770      	bx	lr
 8000314:	40013c00 	.word	0x40013c00
 8000318:	20000020 	.word	0x20000020

0800031c <SystemInit>:


uint32_t DWT_Init(void)
{
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800031c:	4a0e      	ldr	r2, [pc, #56]	@ (8000358 <SystemInit+0x3c>)
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800031e:	4b0f      	ldr	r3, [pc, #60]	@ (800035c <SystemInit+0x40>)
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000320:	f8d2 10fc 	ldr.w	r1, [r2, #252]	@ 0xfc
 8000324:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8000328:	f8c2 10fc 	str.w	r1, [r2, #252]	@ 0xfc
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800032c:	f8d2 10fc 	ldr.w	r1, [r2, #252]	@ 0xfc
 8000330:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 8000334:	f8c2 10fc 	str.w	r1, [r2, #252]	@ 0xfc
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	f022 0201 	bic.w	r2, r2, #1
 800033e:	601a      	str	r2, [r3, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000340:	681a      	ldr	r2, [r3, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000342:	2000      	movs	r0, #0
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000344:	f042 0201 	orr.w	r2, r2, #1
 8000348:	601a      	str	r2, [r3, #0]
    DWT->CYCCNT = 0;
 800034a:	6058      	str	r0, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800034c:	bf00      	nop
    __ASM volatile ("NOP");
 800034e:	bf00      	nop
    __ASM volatile ("NOP");
 8000350:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000352:	685b      	ldr	r3, [r3, #4]
}
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	e000ed00 	.word	0xe000ed00
 800035c:	e0001000 	.word	0xe0001000

08000360 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000360:	480d      	ldr	r0, [pc, #52]	@ (8000398 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000362:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000364:	f7ff ffda 	bl	800031c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000368:	480c      	ldr	r0, [pc, #48]	@ (800039c <LoopForever+0x6>)
  ldr r1, =_edata
 800036a:	490d      	ldr	r1, [pc, #52]	@ (80003a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800036c:	4a0d      	ldr	r2, [pc, #52]	@ (80003a4 <LoopForever+0xe>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000370:	e002      	b.n	8000378 <LoopCopyDataInit>

08000372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000376:	3304      	adds	r3, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800037c:	d3f9      	bcc.n	8000372 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037e:	4a0a      	ldr	r2, [pc, #40]	@ (80003a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000380:	4c0a      	ldr	r4, [pc, #40]	@ (80003ac <LoopForever+0x16>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000384:	e001      	b.n	800038a <LoopFillZerobss>

08000386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000388:	3204      	adds	r2, #4

0800038a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800038c:	d3fb      	bcc.n	8000386 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038e:	f000 f811 	bl	80003b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000392:	f7ff ff69 	bl	8000268 <main>

08000396 <LoopForever>:

LoopForever:
  b LoopForever
 8000396:	e7fe      	b.n	8000396 <LoopForever>
  ldr   r0, =_estack
 8000398:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800039c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003a4:	0800041c 	.word	0x0800041c
  ldr r2, =_sbss
 80003a8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003ac:	20000024 	.word	0x20000024

080003b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b0:	e7fe      	b.n	80003b0 <ADC_IRQHandler>
	...

080003b4 <__libc_init_array>:
 80003b4:	b570      	push	{r4, r5, r6, lr}
 80003b6:	4d0d      	ldr	r5, [pc, #52]	@ (80003ec <__libc_init_array+0x38>)
 80003b8:	4c0d      	ldr	r4, [pc, #52]	@ (80003f0 <__libc_init_array+0x3c>)
 80003ba:	1b64      	subs	r4, r4, r5
 80003bc:	10a4      	asrs	r4, r4, #2
 80003be:	2600      	movs	r6, #0
 80003c0:	42a6      	cmp	r6, r4
 80003c2:	d109      	bne.n	80003d8 <__libc_init_array+0x24>
 80003c4:	4d0b      	ldr	r5, [pc, #44]	@ (80003f4 <__libc_init_array+0x40>)
 80003c6:	4c0c      	ldr	r4, [pc, #48]	@ (80003f8 <__libc_init_array+0x44>)
 80003c8:	f000 f818 	bl	80003fc <_init>
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	10a4      	asrs	r4, r4, #2
 80003d0:	2600      	movs	r6, #0
 80003d2:	42a6      	cmp	r6, r4
 80003d4:	d105      	bne.n	80003e2 <__libc_init_array+0x2e>
 80003d6:	bd70      	pop	{r4, r5, r6, pc}
 80003d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003dc:	4798      	blx	r3
 80003de:	3601      	adds	r6, #1
 80003e0:	e7ee      	b.n	80003c0 <__libc_init_array+0xc>
 80003e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e6:	4798      	blx	r3
 80003e8:	3601      	adds	r6, #1
 80003ea:	e7f2      	b.n	80003d2 <__libc_init_array+0x1e>
 80003ec:	08000414 	.word	0x08000414
 80003f0:	08000414 	.word	0x08000414
 80003f4:	08000414 	.word	0x08000414
 80003f8:	08000418 	.word	0x08000418

080003fc <_init>:
 80003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fe:	bf00      	nop
 8000400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000402:	bc08      	pop	{r3}
 8000404:	469e      	mov	lr, r3
 8000406:	4770      	bx	lr

08000408 <_fini>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	bf00      	nop
 800040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040e:	bc08      	pop	{r3}
 8000410:	469e      	mov	lr, r3
 8000412:	4770      	bx	lr
